; ModuleID = 'llama'
source_filename = "llama"

%0 = type { i64 }

@display_array = local_unnamed_addr global [2 x i8*] zeroinitializer
@0 = private unnamed_addr constant [33 x i8] c"Runtime Error: Division by zero\0A\00", align 1
@1 = private unnamed_addr constant [85 x i8] c"Runtime Error: Invalid constructor of type pile encountered in comparison operation\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"left\00", align 1
@3 = private unnamed_addr constant [7 x i8] c"middle\00", align 1
@4 = private unnamed_addr constant [6 x i8] c"right\00", align 1
@5 = private unnamed_addr constant [71 x i8] c"Runtime Error: Given expression could not be matched with some clause\0A\00", align 1
@6 = private unnamed_addr constant [14 x i8] c"Moving from: \00", align 1
@7 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@9 = private unnamed_addr constant [35 x i8] c"Please, give the number of rings: \00", align 1

declare i1 @lla_print_string({ i8*, i64 }*) local_unnamed_addr

declare i64 @lla_read_int(i1) local_unnamed_addr

declare i1 @lla_exit_with_error({ i8*, i64 }*, i64) local_unnamed_addr

declare i8* @GC_init() local_unnamed_addr

declare i8* @GC_malloc(i64) local_unnamed_addr

declare void @GC_register_finalizer(i8*, void (i8*, i8*)*, i8*, void (i8*, i8*)**, i8**) local_unnamed_addr

define void @_free_array_of_malloc(i8* nocapture readonly %0, i8* nocapture readnone %1) {
  %3 = bitcast i8* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @free(i8* %4)
  ret void
}

declare void @free(i8*) local_unnamed_addr

define void @_runtime_error(i8* %0, i64 %1) local_unnamed_addr {
  %3 = tail call i8* @GC_malloc(i64 16)
  tail call void @GC_register_finalizer(i8* %3, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %4 = bitcast i8* %3 to { i8*, i64 }*
  %5 = bitcast i8* %3 to i8**
  store i8* %0, i8** %5, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to i64*
  store i64 %1, i64* %7, align 4
  %8 = tail call i1 @lla_exit_with_error({ i8*, i64 }* %4, i64 1)
  ret void
}

define i64 @_binary_int_division(i64 %0, i64 %1) local_unnamed_addr {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %.preheader, label %11

.preheader:                                       ; preds = %2
  br label %4

4:                                                ; preds = %.preheader, %4
  %5 = tail call i8* @GC_malloc(i64 16)
  tail call void @GC_register_finalizer(i8* %5, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %6 = bitcast i8* %5 to { i8*, i64 }*
  %7 = bitcast i8* %5 to i8**
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @0, i64 0, i64 0), i8** %7, align 8
  %8 = getelementptr inbounds i8, i8* %5, i64 8
  %9 = bitcast i8* %8 to i64*
  store i64 33, i64* %9, align 4
  %10 = tail call i1 @lla_exit_with_error({ i8*, i64 }* %6, i64 1)
  br label %4

11:                                               ; preds = %2
  %12 = sdiv i64 %0, %1
  ret i64 %12
}

define float @_binary_float_division(float %0, float %1) local_unnamed_addr {
  %3 = fcmp oeq float %1, 0.000000e+00
  br i1 %3, label %.preheader, label %11

.preheader:                                       ; preds = %2
  br label %4

4:                                                ; preds = %.preheader, %4
  %5 = tail call i8* @GC_malloc(i64 16)
  tail call void @GC_register_finalizer(i8* %5, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %6 = bitcast i8* %5 to { i8*, i64 }*
  %7 = bitcast i8* %5 to i8**
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @0, i64 0, i64 0), i8** %7, align 8
  %8 = getelementptr inbounds i8, i8* %5, i64 8
  %9 = bitcast i8* %8 to i64*
  store i64 33, i64* %9, align 4
  %10 = tail call i1 @lla_exit_with_error({ i8*, i64 }* %6, i64 1)
  br label %4

11:                                               ; preds = %2
  %12 = fdiv float %0, %1
  ret float %12
}

define i64 @main() local_unnamed_addr {
  %1 = alloca {}, align 8
  %2 = tail call i8* @GC_init()
  %3 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  store {}* %1, {}** bitcast ([2 x i8*]* @display_array to {}**), align 8
  %4 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %4, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %5 = bitcast i8* %4 to { i8*, i64 }*
  %6 = bitcast i8* %4 to i8**
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @9, i64 0, i64 0), i8** %6, align 8
  %7 = getelementptr inbounds i8, i8* %4, i64 8
  %8 = bitcast i8* %7 to i64*
  store i64 35, i64* %8, align 4
  %9 = call i1 @lla_print_string({ i8*, i64 }* %5)
  %10 = call i64 @lla_read_int(i1 false)
  %11 = call i8* @GC_malloc(i64 8)
  %12 = bitcast i8* %11 to %0*
  %13 = bitcast i8* %11 to i64*
  store i64 1, i64* %13, align 4
  %14 = call i8* @GC_malloc(i64 8)
  %15 = bitcast i8* %14 to %0*
  %16 = bitcast i8* %14 to i64*
  store i64 3, i64* %16, align 4
  %17 = call i8* @GC_malloc(i64 8)
  %18 = bitcast i8* %17 to %0*
  %19 = bitcast i8* %17 to i64*
  store i64 2, i64* %19, align 4
  %20 = call i1 @"fn3:hanoi"(i64 %10, %0* %12, %0* %15, %0* %18)
  store i8* %3, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  ret i64 0
}

define i1 @"_pile:1_equality"(%0* nocapture readonly %0, %0* nocapture readonly %1) local_unnamed_addr {
  %.reg2mem = alloca i1, align 1
  %.reg2mem9 = alloca i64, align 8
  %3 = getelementptr inbounds %0, %0* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 4
  store i64 %4, i64* %.reg2mem9, align 4
  %5 = getelementptr inbounds %0, %0* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 4
  %7 = icmp eq i64 %4, %6
  store i1 %7, i1* %.reg2mem, align 1
  br i1 %7, label %8, label %._crit_edge

._crit_edge:                                      ; preds = %2
  br label %16

8:                                                ; preds = %2
  %.reload10 = load i64, i64* %.reg2mem9, align 4
  %.off = add i64 %.reload10, -1
  %switch = icmp ult i64 %.off, 3
  br i1 %switch, label %._crit_edge7, label %.preheader

._crit_edge7:                                     ; preds = %8
  br label %16

.preheader:                                       ; preds = %8
  br label %9

9:                                                ; preds = %.preheader, %9
  %10 = tail call i8* @GC_malloc(i64 16)
  tail call void @GC_register_finalizer(i8* %10, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %11 = bitcast i8* %10 to { i8*, i64 }*
  %12 = bitcast i8* %10 to i8**
  store i8* getelementptr inbounds ([85 x i8], [85 x i8]* @1, i64 0, i64 0), i8** %12, align 8
  %13 = getelementptr inbounds i8, i8* %10, i64 8
  %14 = bitcast i8* %13 to i64*
  store i64 85, i64* %14, align 4
  %15 = tail call i1 @lla_exit_with_error({ i8*, i64 }* %11, i64 1)
  br label %9

16:                                               ; preds = %._crit_edge7, %._crit_edge
  %.reload = load i1, i1* %.reg2mem, align 1
  ret i1 %.reload
}

define i1 @"fn1:print_pile"(%0* %0) local_unnamed_addr {
  %2 = alloca {}, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem20 = alloca i1, align 1
  %.reg2mem22 = alloca i1, align 1
  %.reg2mem24 = alloca i64, align 8
  %.reg2mem28 = alloca i8*, align 8
  %.reg2mem30 = alloca i1, align 1
  %3 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  store i8* %3, i8** %.reg2mem28, align 8
  store {}* %2, {}** bitcast (i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1) to {}**), align 8
  %4 = getelementptr inbounds %0, %0* %0, i64 0, i32 0
  %5 = load i64, i64* %4, align 4
  store i64 %5, i64* %.reg2mem24, align 4
  %6 = icmp eq i64 %5, 1
  br i1 %6, label %7, label %14

7:                                                ; preds = %1
  %8 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %8, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %9 = bitcast i8* %8 to { i8*, i64 }*
  %10 = bitcast i8* %8 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i8** %10, align 8
  %11 = getelementptr inbounds i8, i8* %8, i64 8
  %12 = bitcast i8* %11 to i64*
  store i64 5, i64* %12, align 4
  %13 = call i1 @lla_print_string({ i8*, i64 }* %9)
  store i1 %13, i1* %.reg2mem22, align 1
  store i1 %13, i1* %.reg2mem30, align 1
  br label %39

14:                                               ; preds = %1
  %15 = icmp eq i64 %5, 2
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %17, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %18 = bitcast i8* %17 to { i8*, i64 }*
  %19 = bitcast i8* %17 to i8**
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i8** %19, align 8
  %20 = getelementptr inbounds i8, i8* %17, i64 8
  %21 = bitcast i8* %20 to i64*
  store i64 7, i64* %21, align 4
  %22 = call i1 @lla_print_string({ i8*, i64 }* %18)
  store i1 %22, i1* %.reg2mem20, align 1
  store i1 %22, i1* %.reg2mem30, align 1
  br label %39

23:                                               ; preds = %14
  %24 = icmp eq i64 %5, 3
  br i1 %24, label %25, label %.preheader

.preheader:                                       ; preds = %23
  br label %32

25:                                               ; preds = %23
  %26 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %26, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %27 = bitcast i8* %26 to { i8*, i64 }*
  %28 = bitcast i8* %26 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i8** %28, align 8
  %29 = getelementptr inbounds i8, i8* %26, i64 8
  %30 = bitcast i8* %29 to i64*
  store i64 6, i64* %30, align 4
  %31 = call i1 @lla_print_string({ i8*, i64 }* %27)
  store i1 %31, i1* %.reg2mem, align 1
  store i1 %31, i1* %.reg2mem30, align 1
  br label %39

32:                                               ; preds = %.preheader, %32
  %33 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %33, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %34 = bitcast i8* %33 to { i8*, i64 }*
  %35 = bitcast i8* %33 to i8**
  store i8* getelementptr inbounds ([71 x i8], [71 x i8]* @5, i64 0, i64 0), i8** %35, align 8
  %36 = getelementptr inbounds i8, i8* %33, i64 8
  %37 = bitcast i8* %36 to i64*
  store i64 71, i64* %37, align 4
  %38 = call i1 @lla_exit_with_error({ i8*, i64 }* %34, i64 1)
  br label %32

39:                                               ; preds = %25, %16, %7
  %.reload31 = load i1, i1* %.reg2mem30, align 1
  %.reload29 = load i8*, i8** %.reg2mem28, align 8
  store i8* %.reload29, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  ret i1 %.reload31
}

define i1 @"fn2:move"(%0* %0, %0* %1) local_unnamed_addr {
  %3 = alloca {}, align 8
  %4 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  store {}* %3, {}** bitcast (i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1) to {}**), align 8
  %5 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %5, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %6 = bitcast i8* %5 to { i8*, i64 }*
  %7 = bitcast i8* %5 to i8**
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @6, i64 0, i64 0), i8** %7, align 8
  %8 = getelementptr inbounds i8, i8* %5, i64 8
  %9 = bitcast i8* %8 to i64*
  store i64 14, i64* %9, align 4
  %10 = call i1 @lla_print_string({ i8*, i64 }* %6)
  %11 = call i1 @"fn1:print_pile"(%0* %0)
  %12 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %12, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %13 = bitcast i8* %12 to { i8*, i64 }*
  %14 = bitcast i8* %12 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0), i8** %14, align 8
  %15 = getelementptr inbounds i8, i8* %12, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 5, i64* %16, align 4
  %17 = call i1 @lla_print_string({ i8*, i64 }* %13)
  %18 = call i1 @"fn1:print_pile"(%0* %1)
  %19 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %19, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %20 = bitcast i8* %19 to { i8*, i64 }*
  %21 = bitcast i8* %19 to i8**
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i8** %21, align 8
  %22 = getelementptr inbounds i8, i8* %19, i64 8
  %23 = bitcast i8* %22 to i64*
  store i64 2, i64* %23, align 4
  %24 = call i1 @lla_print_string({ i8*, i64 }* %20)
  store i8* %4, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  ret i1 %24
}

define i1 @"fn3:hanoi"(i64 %0, %0* %1, %0* %2, %0* %3) local_unnamed_addr {
  %5 = alloca {}, align 8
  %.reg2mem = alloca i8*, align 8
  %6 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  store i8* %6, i8** %.reg2mem, align 8
  store {}* %5, {}** bitcast (i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1) to {}**), align 8
  %7 = icmp sgt i64 %0, 0
  br i1 %7, label %8, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %13

8:                                                ; preds = %4
  %9 = add nsw i64 %0, -1
  %10 = call i1 @"fn3:hanoi"(i64 %9, %0* %1, %0* %3, %0* %2)
  %11 = call i1 @"fn2:move"(%0* %1, %0* %2)
  %12 = call i1 @"fn3:hanoi"(i64 %9, %0* %3, %0* %2, %0* %1)
  br label %13

13:                                               ; preds = %._crit_edge, %8
  %.reload = load i8*, i8** %.reg2mem, align 8
  store i8* %.reload, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  ret i1 false
}
