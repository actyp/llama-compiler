; ModuleID = 'llama'
source_filename = "llama"

@display_array = local_unnamed_addr global [1 x i8*] zeroinitializer
@0 = private unnamed_addr constant [33 x i8] c"Runtime Error: Division by zero\0A\00", align 1
@1 = private unnamed_addr constant [9 x i8] c"Give n: \00", align 1
@2 = private unnamed_addr constant [9 x i8] c"Give k: \00", align 1
@3 = private unnamed_addr constant [7 x i8] c"Mean: \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

declare i1 @lla_print_float(float) local_unnamed_addr

declare i1 @lla_print_string({ i8*, i64 }*) local_unnamed_addr

declare i64 @lla_read_int(i1) local_unnamed_addr

declare float @lla_float_of_int(i64) local_unnamed_addr

declare i1 @lla_exit_with_error({ i8*, i64 }*, i64) local_unnamed_addr

declare i8* @GC_init() local_unnamed_addr

declare i8* @GC_malloc(i64) local_unnamed_addr

declare void @GC_register_finalizer(i8*, void (i8*, i8*)*, i8*, void (i8*, i8*)**, i8**) local_unnamed_addr

define void @_free_array_of_malloc(i8* nocapture readonly %0, i8* nocapture readnone %1) {
  %3 = bitcast i8* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @free(i8* %4)
  ret void
}

declare void @free(i8*) local_unnamed_addr

define void @_runtime_error(i8* %0, i64 %1) local_unnamed_addr {
  %3 = tail call i8* @GC_malloc(i64 16)
  tail call void @GC_register_finalizer(i8* %3, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %4 = bitcast i8* %3 to { i8*, i64 }*
  %5 = bitcast i8* %3 to i8**
  store i8* %0, i8** %5, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to i64*
  store i64 %1, i64* %7, align 4
  %8 = tail call i1 @lla_exit_with_error({ i8*, i64 }* %4, i64 1)
  ret void
}

define i64 @_binary_int_division(i64 %0, i64 %1) local_unnamed_addr {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %.preheader, label %11

.preheader:                                       ; preds = %2
  br label %4

4:                                                ; preds = %.preheader, %4
  %5 = tail call i8* @GC_malloc(i64 16)
  tail call void @GC_register_finalizer(i8* %5, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %6 = bitcast i8* %5 to { i8*, i64 }*
  %7 = bitcast i8* %5 to i8**
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @0, i64 0, i64 0), i8** %7, align 8
  %8 = getelementptr inbounds i8, i8* %5, i64 8
  %9 = bitcast i8* %8 to i64*
  store i64 33, i64* %9, align 4
  %10 = tail call i1 @lla_exit_with_error({ i8*, i64 }* %6, i64 1)
  br label %4

11:                                               ; preds = %2
  %12 = sdiv i64 %0, %1
  ret i64 %12
}

define float @_binary_float_division(float %0, float %1) local_unnamed_addr {
  %3 = fcmp oeq float %1, 0.000000e+00
  br i1 %3, label %.preheader, label %11

.preheader:                                       ; preds = %2
  br label %4

4:                                                ; preds = %.preheader, %4
  %5 = tail call i8* @GC_malloc(i64 16)
  tail call void @GC_register_finalizer(i8* %5, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %6 = bitcast i8* %5 to { i8*, i64 }*
  %7 = bitcast i8* %5 to i8**
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @0, i64 0, i64 0), i8** %7, align 8
  %8 = getelementptr inbounds i8, i8* %5, i64 8
  %9 = bitcast i8* %8 to i64*
  store i64 33, i64* %9, align 4
  %10 = tail call i1 @lla_exit_with_error({ i8*, i64 }* %6, i64 1)
  br label %4

11:                                               ; preds = %2
  %12 = fdiv float %0, %1
  ret float %12
}

define i64 @main() local_unnamed_addr {
  %1 = alloca {}, align 8
  %.reg2mem = alloca float, align 4
  %.reg2mem45 = alloca float, align 4
  %.reg2mem47 = alloca i64, align 8
  %.reg2mem50 = alloca i64*, align 8
  %.reg2mem54 = alloca float*, align 8
  %.reg2mem59 = alloca i64, align 8
  %.reg2mem64 = alloca i64, align 8
  %.reg2mem66 = alloca i8*, align 8
  %.reg2mem68 = alloca i64, align 8
  %2 = tail call i8* @GC_init()
  %3 = load i8*, i8** getelementptr inbounds ([1 x i8*], [1 x i8*]* @display_array, i64 0, i64 0), align 8
  store i8* %3, i8** %.reg2mem66, align 8
  store {}* %1, {}** bitcast ([1 x i8*]* @display_array to {}**), align 8
  %4 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %4, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %5 = bitcast i8* %4 to { i8*, i64 }*
  %6 = bitcast i8* %4 to i8**
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), i8** %6, align 8
  %7 = getelementptr inbounds i8, i8* %4, i64 8
  %8 = bitcast i8* %7 to i64*
  store i64 9, i64* %8, align 4
  %9 = call i1 @lla_print_string({ i8*, i64 }* %5)
  %10 = call i64 @lla_read_int(i1 false)
  store i64 %10, i64* %.reg2mem64, align 4
  %11 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %11, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %12 = bitcast i8* %11 to { i8*, i64 }*
  %13 = bitcast i8* %11 to i8**
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i8** %13, align 8
  %14 = getelementptr inbounds i8, i8* %11, i64 8
  %15 = bitcast i8* %14 to i64*
  store i64 9, i64* %15, align 4
  %16 = call i1 @lla_print_string({ i8*, i64 }* %12)
  %17 = call i64 @lla_read_int(i1 false)
  store i64 %17, i64* %.reg2mem59, align 4
  %18 = call i8* @GC_malloc(i64 4)
  %19 = bitcast i8* %18 to float*
  store float* %19, float** %.reg2mem54, align 8
  %20 = call i8* @GC_malloc(i64 8)
  %21 = bitcast i8* %20 to i64*
  store i64* %21, i64** %.reg2mem50, align 8
  %.reload58 = load float*, float** %.reg2mem54, align 8
  store float 0.000000e+00, float* %.reload58, align 4
  %.reload53 = load i64*, i64** %.reg2mem50, align 8
  store i64 65, i64* %.reload53, align 4
  %.reload60 = load i64, i64* %.reg2mem59, align 4
  %.not40 = icmp sgt i64 1, %.reload60
  br i1 %.not40, label %._crit_edge41, label %.lr.ph

._crit_edge41:                                    ; preds = %0
  br label %32

.lr.ph:                                           ; preds = %0
  store i64 1, i64* %.reg2mem68, align 4
  br label %22

22:                                               ; preds = %._crit_edge42, %.lr.ph
  %.reload69 = load i64, i64* %.reg2mem68, align 4
  %.reload52 = load i64*, i64** %.reg2mem50, align 8
  %23 = load i64, i64* %.reload52, align 4
  %24 = mul i64 %23, 137
  %25 = add i64 %.reload69, 220
  %26 = add i64 %25, %24
  %.reload65 = load i64, i64* %.reg2mem64, align 4
  %27 = srem i64 %26, %.reload65
  store i64 %27, i64* %.reload52, align 4
  %.reload57 = load float*, float** %.reg2mem54, align 8
  %28 = load float, float* %.reload57, align 4
  %29 = call float @lla_float_of_int(i64 %27)
  %30 = fadd float %28, %29
  %.reload56 = load float*, float** %.reg2mem54, align 8
  store float %30, float* %.reload56, align 4
  %31 = add i64 %.reload69, 1
  store i64 %31, i64* %.reg2mem47, align 4
  %.reload63 = load i64, i64* %.reg2mem59, align 4
  %.not = icmp sgt i64 %31, %.reload63
  br i1 %.not, label %._crit_edge, label %._crit_edge42

._crit_edge42:                                    ; preds = %22
  store i64 %31, i64* %.reg2mem68, align 4
  br label %22

._crit_edge:                                      ; preds = %22
  br label %32

32:                                               ; preds = %._crit_edge41, %._crit_edge
  %.reload62 = load i64, i64* %.reg2mem59, align 4
  %33 = icmp sgt i64 %.reload62, 0
  br i1 %33, label %34, label %._crit_edge43

._crit_edge43:                                    ; preds = %32
  br label %60

34:                                               ; preds = %32
  %35 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %35, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %36 = bitcast i8* %35 to { i8*, i64 }*
  %37 = bitcast i8* %35 to i8**
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i8** %37, align 8
  %38 = getelementptr inbounds i8, i8* %35, i64 8
  %39 = bitcast i8* %38 to i64*
  store i64 7, i64* %39, align 4
  %40 = call i1 @lla_print_string({ i8*, i64 }* %36)
  %.reload55 = load float*, float** %.reg2mem54, align 8
  %41 = load float, float* %.reload55, align 4
  store float %41, float* %.reg2mem45, align 4
  %.reload61 = load i64, i64* %.reg2mem59, align 4
  %42 = call float @lla_float_of_int(i64 %.reload61)
  store float %42, float* %.reg2mem, align 4
  %43 = fcmp oeq float %42, 0.000000e+00
  br i1 %43, label %.preheader, label %51

.preheader:                                       ; preds = %34
  br label %44

44:                                               ; preds = %.preheader, %44
  %45 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %45, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %46 = bitcast i8* %45 to { i8*, i64 }*
  %47 = bitcast i8* %45 to i8**
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @0, i64 0, i64 0), i8** %47, align 8
  %48 = getelementptr inbounds i8, i8* %45, i64 8
  %49 = bitcast i8* %48 to i64*
  store i64 33, i64* %49, align 4
  %50 = call i1 @lla_exit_with_error({ i8*, i64 }* %46, i64 1)
  br label %44

51:                                               ; preds = %34
  %.reload46 = load float, float* %.reg2mem45, align 4
  %52 = fdiv float %.reload46, %42
  %53 = call i1 @lla_print_float(float %52)
  %54 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %54, void (i8*, i8*)* nonnull @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %55 = bitcast i8* %54 to { i8*, i64 }*
  %56 = bitcast i8* %54 to i8**
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), i8** %56, align 8
  %57 = getelementptr inbounds i8, i8* %54, i64 8
  %58 = bitcast i8* %57 to i64*
  store i64 2, i64* %58, align 4
  %59 = call i1 @lla_print_string({ i8*, i64 }* %55)
  br label %60

60:                                               ; preds = %._crit_edge43, %51
  %.reload67 = load i8*, i8** %.reg2mem66, align 8
  store i8* %.reload67, i8** getelementptr inbounds ([1 x i8*], [1 x i8*]* @display_array, i64 0, i64 0), align 8
  ret i64 0
}
