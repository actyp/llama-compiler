; ModuleID = 'llama'
source_filename = "llama"

@display_array = global [3 x i8*] zeroinitializer
@str = private unnamed_addr constant [33 x i8] c"Runtime Error: Division by zero\0A\00", align 1
@str.1 = private unnamed_addr constant [31 x i8] c"Please, give the upper limit: \00", align 1
@str.2 = private unnamed_addr constant [29 x i8] c"Prime numbers between 0 and \00", align 1
@str.3 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@str.4 = private unnamed_addr constant [3 x i8] c"2\0A\00", align 1
@str.5 = private unnamed_addr constant [3 x i8] c"3\0A\00", align 1
@str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.7 = private unnamed_addr constant [30 x i8] c" prime number(s) were found.\0A\00", align 1

declare i1 @lla_print_int(i64)

declare i1 @lla_print_bool(i1)

declare i1 @lla_print_char(i8)

declare i1 @lla_print_float(float)

declare i1 @lla_print_string({ i8*, i64 }*)

declare i64 @lla_read_int(i1)

declare i1 @lla_read_bool(i1)

declare i8 @lla_read_char(i1)

declare float @lla_read_float(i1)

declare i1 @lla_read_string({ i8*, i64 }*)

declare i64 @lla_abs(i64)

declare float @lla_fabs(float)

declare float @lla_sqrt(float)

declare float @lla_sin(float)

declare float @lla_cos(float)

declare float @lla_tan(float)

declare float @lla_atan(float)

declare float @lla_exp(float)

declare float @lla_ln(float)

declare float @lla_pi(i1)

declare i1 @lla_incr(i64*)

declare i1 @lla_decr(i64*)

declare float @lla_float_of_int(i64)

declare i64 @lla_int_of_float(float)

declare i64 @lla_round(float)

declare i64 @lla_int_of_char(i8)

declare i8 @lla_char_of_int(i64)

declare i64 @lla_strlen({ i8*, i64 }*)

declare i64 @lla_strcmp({ i8*, i64 }*, { i8*, i64 }*)

declare i1 @lla_strcpy({ i8*, i64 }*, { i8*, i64 }*)

declare i1 @lla_strcat({ i8*, i64 }*, { i8*, i64 }*)

declare float @lla_pow(float, float)

declare i1 @lla_exit_with_error({ i8*, i64 }*, i64)

declare i8* @GC_init()

declare i8* @GC_malloc(i64)

declare void @GC_register_finalizer(i8*, void (i8*, i8*)*, i8*, void (i8*, i8*)**, i8**)

define void @_free_array_of_malloc(i8* %0, i8* %1) {
entry:
  %array_struct_ptr = bitcast i8* %0 to { i8*, i64 }*
  %malloc_array_ptr_gep = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 0
  %malloc_array_ptr = load i8*, i8** %malloc_array_ptr_gep, align 8
  tail call void @free(i8* %malloc_array_ptr)
  ret void
}

declare void @free(i8*)

define void @_runtime_error(i8* %0, i64 %1) {
entry:
  %GC_malloc_call = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %array_struct_ptr = bitcast i8* %GC_malloc_call to { i8*, i64 }*
  %temp_struct_store_ptr = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 0
  store i8* %0, i8** %temp_struct_store_ptr, align 8
  %temp_struct_store_ptr1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 1
  store i64 %1, i64* %temp_struct_store_ptr1, align 4
  %lla_exit_with_error_call = call i1 @lla_exit_with_error({ i8*, i64 }* %array_struct_ptr, i64 1)
  ret void
}

define i64 @_binary_int_division(i64 %0, i64 %1) {
entry:
  %denom_zero_comp = icmp eq i64 0, %1
  br i1 %denom_zero_comp, label %runtime_error, label %body

runtime_error:                                    ; preds = %runtime_error, %entry
  call void @_runtime_error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str, i32 0, i32 0), i64 33)
  br label %runtime_error

body:                                             ; preds = %entry
  %division = sdiv i64 %0, %1
  ret i64 %division
}

define float @_binary_float_division(float %0, float %1) {
entry:
  %denom_zero_comp = fcmp oeq float 0.000000e+00, %1
  br i1 %denom_zero_comp, label %runtime_error, label %body

runtime_error:                                    ; preds = %runtime_error, %entry
  call void @_runtime_error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str, i32 0, i32 0), i64 33)
  br label %runtime_error

body:                                             ; preds = %entry
  %division = fdiv float %0, %1
  ret float %division
}

define i64 @main() {
entry:
  %0 = call i8* @GC_init()
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %"main:frame_ptr" = alloca { i64, i64* }, align 8
  %casted_elem_frame_ptr = bitcast { i64, i64* }* %"main:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %"cv1:main" = alloca i1, align 1
  br label %body

body:                                             ; preds = %entry
  %GC_malloc_call = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr = bitcast i8* %GC_malloc_call to { i8*, i64 }*
  %temp_struct_store_ptr = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 0
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str.1, i32 0, i32 0), i8** %temp_struct_store_ptr, align 8
  %temp_struct_store_ptr1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 1
  store i64 31, i64* %temp_struct_store_ptr1, align 4
  %temp_call = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr)
  %temp_call2 = call i64 @lla_read_int(i1 false)
  %display_array_ptr_load3 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr = bitcast i8* %display_array_ptr_load3 to { i64, i64* }*
  %"cv2:limit:temp_gep" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr, i32 0, i32 0
  store i64 %temp_call2, i64* %"cv2:limit:temp_gep", align 4
  %GC_malloc_call4 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call4, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr5 = bitcast i8* %GC_malloc_call4 to { i8*, i64 }*
  %temp_struct_store_ptr6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr5, i32 0, i32 0
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @str.2, i32 0, i32 0), i8** %temp_struct_store_ptr6, align 8
  %temp_struct_store_ptr7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr5, i32 0, i32 1
  store i64 29, i64* %temp_struct_store_ptr7, align 4
  %temp_call8 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr5)
  %display_array_ptr_load9 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr10 = bitcast i8* %display_array_ptr_load9 to { i64, i64* }*
  %"cv2:limit:temp_gep11" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr10, i32 0, i32 0
  %temp_id_load = load i64, i64* %"cv2:limit:temp_gep11", align 4
  %temp_call12 = call i1 @lla_print_int(i64 %temp_id_load)
  %GC_malloc_call13 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call13, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr14 = bitcast i8* %GC_malloc_call13 to { i8*, i64 }*
  %temp_struct_store_ptr15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr14, i32 0, i32 0
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.3, i32 0, i32 0), i8** %temp_struct_store_ptr15, align 8
  %temp_struct_store_ptr16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr14, i32 0, i32 1
  store i64 3, i64* %temp_struct_store_ptr16, align 4
  %temp_call17 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr14)
  %display_array_ptr_load18 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr19 = bitcast i8* %display_array_ptr_load18 to { i64, i64* }*
  %"mv1:counter:temp_gep" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr19, i32 0, i32 1
  %GC_malloc_call20 = call i8* @GC_malloc(i64 8)
  %"mv1:counter_alloca_ptr" = bitcast i8* %GC_malloc_call20 to i64*
  store i64* %"mv1:counter_alloca_ptr", i64** %"mv1:counter:temp_gep", align 8
  %display_array_ptr_load21 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr22 = bitcast i8* %display_array_ptr_load21 to { i64, i64* }*
  %"mv1:counter:temp_gep23" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr22, i32 0, i32 1
  %temp_id_load24 = load i64*, i64** %"mv1:counter:temp_gep23", align 8
  store i64 0, i64* %temp_id_load24, align 4
  %display_array_ptr_load25 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr26 = bitcast i8* %display_array_ptr_load25 to { i64, i64* }*
  %"cv2:limit:temp_gep27" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr26, i32 0, i32 0
  %temp_id_load28 = load i64, i64* %"cv2:limit:temp_gep27", align 4
  %binary_geq = icmp sge i64 %temp_id_load28, 2
  br i1 %binary_geq, label %if_then, label %if_else

if_then:                                          ; preds = %body
  %display_array_ptr_load29 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr30 = bitcast i8* %display_array_ptr_load29 to { i64, i64* }*
  %"mv1:counter:temp_gep31" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr30, i32 0, i32 1
  %temp_id_load32 = load i64*, i64** %"mv1:counter:temp_gep31", align 8
  %temp_call33 = call i1 @lla_incr(i64* %temp_id_load32)
  %GC_malloc_call34 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call34, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr35 = bitcast i8* %GC_malloc_call34 to { i8*, i64 }*
  %temp_struct_store_ptr36 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr35, i32 0, i32 0
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.4, i32 0, i32 0), i8** %temp_struct_store_ptr36, align 8
  %temp_struct_store_ptr37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr35, i32 0, i32 1
  store i64 3, i64* %temp_struct_store_ptr37, align 4
  %temp_call38 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr35)
  br label %if_merge

if_else:                                          ; preds = %body
  br label %if_merge

if_merge:                                         ; preds = %if_else, %if_then
  %temp_phi = phi i1 [ %temp_call38, %if_then ], [ false, %if_else ]
  %display_array_ptr_load42 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr43 = bitcast i8* %display_array_ptr_load42 to { i64, i64* }*
  %"cv2:limit:temp_gep44" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr43, i32 0, i32 0
  %temp_id_load45 = load i64, i64* %"cv2:limit:temp_gep44", align 4
  %binary_geq46 = icmp sge i64 %temp_id_load45, 3
  br i1 %binary_geq46, label %if_then39, label %if_else40

if_then39:                                        ; preds = %if_merge
  %display_array_ptr_load47 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr48 = bitcast i8* %display_array_ptr_load47 to { i64, i64* }*
  %"mv1:counter:temp_gep49" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr48, i32 0, i32 1
  %temp_id_load50 = load i64*, i64** %"mv1:counter:temp_gep49", align 8
  %temp_call51 = call i1 @lla_incr(i64* %temp_id_load50)
  %GC_malloc_call52 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call52, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr53 = bitcast i8* %GC_malloc_call52 to { i8*, i64 }*
  %temp_struct_store_ptr54 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr53, i32 0, i32 0
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.5, i32 0, i32 0), i8** %temp_struct_store_ptr54, align 8
  %temp_struct_store_ptr55 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr53, i32 0, i32 1
  store i64 3, i64* %temp_struct_store_ptr55, align 4
  %temp_call56 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr53)
  br label %if_merge41

if_else40:                                        ; preds = %if_merge
  br label %if_merge41

if_merge41:                                       ; preds = %if_else40, %if_then39
  %temp_phi57 = phi i1 [ %temp_call56, %if_then39 ], [ false, %if_else40 ]
  %temp_call58 = call i1 @"fn3:loop"(i64 6)
  %GC_malloc_call59 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call59, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr60 = bitcast i8* %GC_malloc_call59 to { i8*, i64 }*
  %temp_struct_store_ptr61 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr60, i32 0, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.6, i32 0, i32 0), i8** %temp_struct_store_ptr61, align 8
  %temp_struct_store_ptr62 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr60, i32 0, i32 1
  store i64 2, i64* %temp_struct_store_ptr62, align 4
  %temp_call63 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr60)
  %display_array_ptr_load64 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr65 = bitcast i8* %display_array_ptr_load64 to { i64, i64* }*
  %"mv1:counter:temp_gep66" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr65, i32 0, i32 1
  %temp_id_load67 = load i64*, i64** %"mv1:counter:temp_gep66", align 8
  %unary_ref = load i64, i64* %temp_id_load67, align 4
  %temp_call68 = call i1 @lla_print_int(i64 %unary_ref)
  %GC_malloc_call69 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call69, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr70 = bitcast i8* %GC_malloc_call69 to { i8*, i64 }*
  %temp_struct_store_ptr71 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr70, i32 0, i32 0
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str.7, i32 0, i32 0), i8** %temp_struct_store_ptr71, align 8
  %temp_struct_store_ptr72 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr70, i32 0, i32 1
  store i64 30, i64* %temp_struct_store_ptr72, align 4
  %temp_call73 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr70)
  store i1 %temp_call73, i1* %"cv1:main", align 1
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  ret i64 0
}

define i1 @"fn1:prime"(i64 %0) {
entry:
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %"fn1:prime:frame_ptr" = alloca { i64 }, align 8
  %casted_elem_frame_ptr = bitcast { i64 }* %"fn1:prime:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  br label %body

body:                                             ; preds = %entry
  %display_array_ptr_load1 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %casted_frame_ptr = bitcast i8* %display_array_ptr_load1 to { i64 }*
  %"pm1:n:temp_gep" = getelementptr inbounds { i64 }, { i64 }* %casted_frame_ptr, i32 0, i32 0
  store i64 %0, i64* %"pm1:n:temp_gep", align 4
  %display_array_ptr_load2 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %casted_frame_ptr3 = bitcast i8* %display_array_ptr_load2 to { i64 }*
  %"pm1:n:temp_gep4" = getelementptr inbounds { i64 }, { i64 }* %casted_frame_ptr3, i32 0, i32 0
  %temp_id_load = load i64, i64* %"pm1:n:temp_gep4", align 4
  %binary_lt = icmp slt i64 %temp_id_load, 0
  br i1 %binary_lt, label %if_then, label %if_else

if_then:                                          ; preds = %body
  %display_array_ptr_load5 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %casted_frame_ptr6 = bitcast i8* %display_array_ptr_load5 to { i64 }*
  %"pm1:n:temp_gep7" = getelementptr inbounds { i64 }, { i64 }* %casted_frame_ptr6, i32 0, i32 0
  %temp_id_load8 = load i64, i64* %"pm1:n:temp_gep7", align 4
  %unary_int_neg_mul = mul i64 -1, %temp_id_load8
  %temp_call = call i1 @"fn1:prime"(i64 %unary_int_neg_mul)
  br label %if_merge

if_else:                                          ; preds = %body
  %display_array_ptr_load12 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %casted_frame_ptr13 = bitcast i8* %display_array_ptr_load12 to { i64 }*
  %"pm1:n:temp_gep14" = getelementptr inbounds { i64 }, { i64 }* %casted_frame_ptr13, i32 0, i32 0
  %temp_id_load15 = load i64, i64* %"pm1:n:temp_gep14", align 4
  %binary_lt16 = icmp slt i64 %temp_id_load15, 2
  br i1 %binary_lt16, label %if_then9, label %if_else10

if_then9:                                         ; preds = %if_else
  br label %if_merge11

if_else10:                                        ; preds = %if_else
  %display_array_ptr_load20 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %casted_frame_ptr21 = bitcast i8* %display_array_ptr_load20 to { i64 }*
  %"pm1:n:temp_gep22" = getelementptr inbounds { i64 }, { i64 }* %casted_frame_ptr21, i32 0, i32 0
  %temp_id_load23 = load i64, i64* %"pm1:n:temp_gep22", align 4
  %int_equality_check = icmp eq i64 %temp_id_load23, 2
  br i1 %int_equality_check, label %if_then17, label %if_else18

if_then17:                                        ; preds = %if_else10
  br label %if_merge19

if_else18:                                        ; preds = %if_else10
  %display_array_ptr_load27 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %casted_frame_ptr28 = bitcast i8* %display_array_ptr_load27 to { i64 }*
  %"pm1:n:temp_gep29" = getelementptr inbounds { i64 }, { i64 }* %casted_frame_ptr28, i32 0, i32 0
  %temp_id_load30 = load i64, i64* %"pm1:n:temp_gep29", align 4
  %binary_int_mod = srem i64 %temp_id_load30, 2
  %int_equality_check31 = icmp eq i64 %binary_int_mod, 0
  br i1 %int_equality_check31, label %if_then24, label %if_else25

if_then24:                                        ; preds = %if_else18
  br label %if_merge26

if_else25:                                        ; preds = %if_else18
  %temp_call32 = call i1 @"fn2:loop"(i64 3)
  br label %if_merge26

if_merge26:                                       ; preds = %if_else25, %if_then24
  %temp_phi = phi i1 [ false, %if_then24 ], [ %temp_call32, %if_else25 ]
  br label %if_merge19

if_merge19:                                       ; preds = %if_merge26, %if_then17
  %temp_phi33 = phi i1 [ true, %if_then17 ], [ %temp_phi, %if_merge26 ]
  br label %if_merge11

if_merge11:                                       ; preds = %if_merge19, %if_then9
  %temp_phi34 = phi i1 [ false, %if_then9 ], [ %temp_phi33, %if_merge19 ]
  br label %if_merge

if_merge:                                         ; preds = %if_merge11, %if_then
  %temp_phi35 = phi i1 [ %temp_call, %if_then ], [ %temp_phi34, %if_merge11 ]
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  ret i1 %temp_phi35
}

define i1 @"fn2:loop"(i64 %0) {
entry:
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 2), align 8
  %"fn2:loop:frame_ptr" = alloca {}, align 8
  %casted_elem_frame_ptr = bitcast {}* %"fn2:loop:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 2), align 8
  %"pm2:i" = alloca i64, align 8
  br label %body

body:                                             ; preds = %entry
  store i64 %0, i64* %"pm2:i", align 4
  %temp_id_load = load i64, i64* %"pm2:i", align 4
  %display_array_ptr_load1 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %casted_frame_ptr = bitcast i8* %display_array_ptr_load1 to { i64 }*
  %"pm1:n:temp_gep" = getelementptr inbounds { i64 }, { i64 }* %casted_frame_ptr, i32 0, i32 0
  %temp_id_load2 = load i64, i64* %"pm1:n:temp_gep", align 4
  %binary_int_division = call i64 @_binary_int_division(i64 %temp_id_load2, i64 2)
  %binary_leq = icmp sle i64 %temp_id_load, %binary_int_division
  br i1 %binary_leq, label %if_then, label %if_else

if_then:                                          ; preds = %body
  %display_array_ptr_load6 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %casted_frame_ptr7 = bitcast i8* %display_array_ptr_load6 to { i64 }*
  %"pm1:n:temp_gep8" = getelementptr inbounds { i64 }, { i64 }* %casted_frame_ptr7, i32 0, i32 0
  %temp_id_load9 = load i64, i64* %"pm1:n:temp_gep8", align 4
  %temp_id_load10 = load i64, i64* %"pm2:i", align 4
  %binary_int_mod = srem i64 %temp_id_load9, %temp_id_load10
  %int_equality_check = icmp eq i64 %binary_int_mod, 0
  br i1 %int_equality_check, label %if_then3, label %if_else4

if_then3:                                         ; preds = %if_then
  br label %if_merge5

if_else4:                                         ; preds = %if_then
  %temp_id_load11 = load i64, i64* %"pm2:i", align 4
  %binary_int_add = add i64 %temp_id_load11, 2
  %temp_call = call i1 @"fn2:loop"(i64 %binary_int_add)
  br label %if_merge5

if_merge5:                                        ; preds = %if_else4, %if_then3
  %temp_phi = phi i1 [ false, %if_then3 ], [ %temp_call, %if_else4 ]
  br label %if_merge

if_else:                                          ; preds = %body
  br label %if_merge

if_merge:                                         ; preds = %if_else, %if_merge5
  %temp_phi12 = phi i1 [ %temp_phi, %if_merge5 ], [ true, %if_else ]
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 2), align 8
  ret i1 %temp_phi12
}

define i1 @"fn3:loop"(i64 %0) {
entry:
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %"fn3:loop:frame_ptr" = alloca {}, align 8
  %casted_elem_frame_ptr = bitcast {}* %"fn3:loop:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %"pm3:number" = alloca i64, align 8
  br label %body

body:                                             ; preds = %entry
  store i64 %0, i64* %"pm3:number", align 4
  %temp_id_load = load i64, i64* %"pm3:number", align 4
  %display_array_ptr_load1 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr = bitcast i8* %display_array_ptr_load1 to { i64, i64* }*
  %"cv2:limit:temp_gep" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr, i32 0, i32 0
  %temp_id_load2 = load i64, i64* %"cv2:limit:temp_gep", align 4
  %binary_leq = icmp sle i64 %temp_id_load, %temp_id_load2
  br i1 %binary_leq, label %if_then, label %if_else

if_then:                                          ; preds = %body
  %temp_id_load6 = load i64, i64* %"pm3:number", align 4
  %binary_int_sub = sub i64 %temp_id_load6, 1
  %temp_call = call i1 @"fn1:prime"(i64 %binary_int_sub)
  br i1 %temp_call, label %if_then3, label %if_else4

if_then3:                                         ; preds = %if_then
  %display_array_ptr_load7 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr8 = bitcast i8* %display_array_ptr_load7 to { i64, i64* }*
  %"mv1:counter:temp_gep" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr8, i32 0, i32 1
  %temp_id_load9 = load i64*, i64** %"mv1:counter:temp_gep", align 8
  %temp_call10 = call i1 @lla_incr(i64* %temp_id_load9)
  %temp_id_load11 = load i64, i64* %"pm3:number", align 4
  %binary_int_sub12 = sub i64 %temp_id_load11, 1
  %temp_call13 = call i1 @lla_print_int(i64 %binary_int_sub12)
  %GC_malloc_call = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr = bitcast i8* %GC_malloc_call to { i8*, i64 }*
  %temp_struct_store_ptr = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.6, i32 0, i32 0), i8** %temp_struct_store_ptr, align 8
  %temp_struct_store_ptr14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 1
  store i64 2, i64* %temp_struct_store_ptr14, align 4
  %temp_call15 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr)
  br label %if_merge5

if_else4:                                         ; preds = %if_then
  br label %if_merge5

if_merge5:                                        ; preds = %if_else4, %if_then3
  %temp_phi = phi i1 [ %temp_call15, %if_then3 ], [ false, %if_else4 ]
  %temp_id_load19 = load i64, i64* %"pm3:number", align 4
  %display_array_ptr_load20 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr21 = bitcast i8* %display_array_ptr_load20 to { i64, i64* }*
  %"cv2:limit:temp_gep22" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr21, i32 0, i32 0
  %temp_id_load23 = load i64, i64* %"cv2:limit:temp_gep22", align 4
  %int_equality_check = icmp eq i64 %temp_id_load19, %temp_id_load23
  %binary_struct_unequality = xor i1 %int_equality_check, true
  %short_circuit_check = icmp eq i1 false, %binary_struct_unequality
  br i1 %short_circuit_check, label %logical_continue, label %logical_non_short_circuit

if_then16:                                        ; preds = %logical_continue
  %display_array_ptr_load27 = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr28 = bitcast i8* %display_array_ptr_load27 to { i64, i64* }*
  %"mv1:counter:temp_gep29" = getelementptr inbounds { i64, i64* }, { i64, i64* }* %casted_frame_ptr28, i32 0, i32 1
  %temp_id_load30 = load i64*, i64** %"mv1:counter:temp_gep29", align 8
  %temp_call31 = call i1 @lla_incr(i64* %temp_id_load30)
  %temp_id_load32 = load i64, i64* %"pm3:number", align 4
  %binary_int_add33 = add i64 %temp_id_load32, 1
  %temp_call34 = call i1 @lla_print_int(i64 %binary_int_add33)
  %GC_malloc_call35 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call35, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr36 = bitcast i8* %GC_malloc_call35 to { i8*, i64 }*
  %temp_struct_store_ptr37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr36, i32 0, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.6, i32 0, i32 0), i8** %temp_struct_store_ptr37, align 8
  %temp_struct_store_ptr38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr36, i32 0, i32 1
  store i64 2, i64* %temp_struct_store_ptr38, align 4
  %temp_call39 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr36)
  br label %if_merge18

if_else17:                                        ; preds = %logical_continue
  br label %if_merge18

if_merge18:                                       ; preds = %if_else17, %if_then16
  %temp_phi40 = phi i1 [ %temp_call39, %if_then16 ], [ false, %if_else17 ]
  %temp_id_load41 = load i64, i64* %"pm3:number", align 4
  %binary_int_add42 = add i64 %temp_id_load41, 6
  %temp_call43 = call i1 @"fn3:loop"(i64 %binary_int_add42)
  br label %if_merge

if_else:                                          ; preds = %body
  br label %if_merge

if_merge:                                         ; preds = %if_else, %if_merge18
  %temp_phi44 = phi i1 [ %temp_call43, %if_merge18 ], [ false, %if_else ]
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  ret i1 %temp_phi44

logical_non_short_circuit:                        ; preds = %if_merge5
  %temp_id_load24 = load i64, i64* %"pm3:number", align 4
  %binary_int_add = add i64 %temp_id_load24, 1
  %temp_call25 = call i1 @"fn1:prime"(i64 %binary_int_add)
  %logical_function = and i1 %binary_struct_unequality, %temp_call25
  br label %logical_continue

logical_continue:                                 ; preds = %logical_non_short_circuit, %if_merge5
  %temp_phi26 = phi i1 [ false, %if_merge5 ], [ %logical_function, %logical_non_short_circuit ]
  br i1 %temp_phi26, label %if_then16, label %if_else17
}
