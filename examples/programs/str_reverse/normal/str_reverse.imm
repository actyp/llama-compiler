; ModuleID = 'llama'
source_filename = "llama"

@display_array = global [2 x i8*] zeroinitializer
@str = private unnamed_addr constant [33 x i8] c"Runtime Error: Division by zero\0A\00", align 1
@str.1 = private unnamed_addr constant [54 x i8] c"Runtime Error: Out of bounds error in array ref call\0A\00", align 1
@str.2 = private unnamed_addr constant [65 x i8] c"Runtime Error: Non positive dimension size on array declaration\0A\00", align 1
@str.3 = private unnamed_addr constant [14 x i8] c"\0A!dlrow olleH\00", align 1

declare i1 @lla_print_int(i64)

declare i1 @lla_print_bool(i1)

declare i1 @lla_print_char(i8)

declare i1 @lla_print_float(float)

declare i1 @lla_print_string({ i8*, i64 }*)

declare i64 @lla_read_int(i1)

declare i1 @lla_read_bool(i1)

declare i8 @lla_read_char(i1)

declare float @lla_read_float(i1)

declare i1 @lla_read_string({ i8*, i64 }*)

declare i64 @lla_abs(i64)

declare float @lla_fabs(float)

declare float @lla_sqrt(float)

declare float @lla_sin(float)

declare float @lla_cos(float)

declare float @lla_tan(float)

declare float @lla_atan(float)

declare float @lla_exp(float)

declare float @lla_ln(float)

declare float @lla_pi(i1)

declare i1 @lla_incr(i64*)

declare i1 @lla_decr(i64*)

declare float @lla_float_of_int(i64)

declare i64 @lla_int_of_float(float)

declare i64 @lla_round(float)

declare i64 @lla_int_of_char(i8)

declare i8 @lla_char_of_int(i64)

declare i64 @lla_strlen({ i8*, i64 }*)

declare i64 @lla_strcmp({ i8*, i64 }*, { i8*, i64 }*)

declare i1 @lla_strcpy({ i8*, i64 }*, { i8*, i64 }*)

declare i1 @lla_strcat({ i8*, i64 }*, { i8*, i64 }*)

declare float @lla_pow(float, float)

declare i1 @lla_exit_with_error({ i8*, i64 }*, i64)

declare i8* @GC_init()

declare i8* @GC_malloc(i64)

declare void @GC_register_finalizer(i8*, void (i8*, i8*)*, i8*, void (i8*, i8*)**, i8**)

define void @_free_array_of_malloc(i8* %0, i8* %1) {
entry:
  %array_struct_ptr = bitcast i8* %0 to { i8*, i64 }*
  %malloc_array_ptr_gep = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 0
  %malloc_array_ptr = load i8*, i8** %malloc_array_ptr_gep, align 8
  tail call void @free(i8* %malloc_array_ptr)
  ret void
}

declare void @free(i8*)

define void @_runtime_error(i8* %0, i64 %1) {
entry:
  %GC_malloc_call = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %array_struct_ptr = bitcast i8* %GC_malloc_call to { i8*, i64 }*
  %temp_struct_store_ptr = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 0
  store i8* %0, i8** %temp_struct_store_ptr, align 8
  %temp_struct_store_ptr1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 1
  store i64 %1, i64* %temp_struct_store_ptr1, align 4
  %lla_exit_with_error_call = call i1 @lla_exit_with_error({ i8*, i64 }* %array_struct_ptr, i64 1)
  ret void
}

define i64 @_binary_int_division(i64 %0, i64 %1) {
entry:
  %denom_zero_comp = icmp eq i64 0, %1
  br i1 %denom_zero_comp, label %runtime_error, label %body

runtime_error:                                    ; preds = %runtime_error, %entry
  call void @_runtime_error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str, i32 0, i32 0), i64 33)
  br label %runtime_error

body:                                             ; preds = %entry
  %division = sdiv i64 %0, %1
  ret i64 %division
}

define float @_binary_float_division(float %0, float %1) {
entry:
  %denom_zero_comp = fcmp oeq float 0.000000e+00, %1
  br i1 %denom_zero_comp, label %runtime_error, label %body

runtime_error:                                    ; preds = %runtime_error, %entry
  call void @_runtime_error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str, i32 0, i32 0), i64 33)
  br label %runtime_error

body:                                             ; preds = %entry
  %division = fdiv float %0, %1
  ret float %division
}

define i64 @main() {
entry:
  %0 = call i8* @GC_init()
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  %"main:frame_ptr" = alloca {}, align 8
  %casted_elem_frame_ptr = bitcast {}* %"main:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  %"cv1:main" = alloca i1, align 1
  %"ar1:p" = alloca { i8*, i64 }*, align 8
  br label %body

body:                                             ; preds = %entry
  br i1 true, label %array_dec_dim_check_success, label %array_dec_dim_check_failed

array_dec_dim_check_failed:                       ; preds = %array_dec_dim_check_failed, %body
  call void @_runtime_error(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @str.2, i32 0, i32 0), i64 65)
  br label %array_dec_dim_check_failed

array_dec_dim_check_success:                      ; preds = %body
  %1 = trunc i64 20 to i32
  %mallocsize = mul i32 %1, ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i32)
  %array_ptr = tail call i8* @malloc(i32 %mallocsize)
  %GC_malloc_call = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %"ar1:p_struct_ptr" = bitcast i8* %GC_malloc_call to { i8*, i64 }*
  store { i8*, i64 }* %"ar1:p_struct_ptr", { i8*, i64 }** %"ar1:p", align 8
  %temp_struct_store_ptr = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %"ar1:p_struct_ptr", i32 0, i32 0
  store i8* %array_ptr, i8** %temp_struct_store_ptr, align 8
  %temp_struct_store_ptr1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %"ar1:p_struct_ptr", i32 0, i32 1
  store i64 20, i64* %temp_struct_store_ptr1, align 4
  %GC_malloc_call2 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call2, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr = bitcast i8* %GC_malloc_call2 to { i8*, i64 }*
  %temp_struct_store_ptr3 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 0
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.3, i32 0, i32 0), i8** %temp_struct_store_ptr3, align 8
  %temp_struct_store_ptr4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 1
  store i64 14, i64* %temp_struct_store_ptr4, align 4
  %temp_id_load = load { i8*, i64 }*, { i8*, i64 }** %"ar1:p", align 8
  %temp_call = call i1 @"fn1:reverse"({ i8*, i64 }* %string_struct_ptr, { i8*, i64 }* %temp_id_load)
  %temp_id_load5 = load { i8*, i64 }*, { i8*, i64 }** %"ar1:p", align 8
  %temp_call6 = call i1 @lla_print_string({ i8*, i64 }* %temp_id_load5)
  store i1 %temp_call6, i1* %"cv1:main", align 1
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  ret i64 0
}

define i1 @"fn1:reverse"({ i8*, i64 }* %0, { i8*, i64 }* %1) {
entry:
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  %"fn1:reverse:frame_ptr" = alloca {}, align 8
  %casted_elem_frame_ptr = bitcast {}* %"fn1:reverse:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  %"pm1:s" = alloca { i8*, i64 }*, align 8
  %"pm2:r" = alloca { i8*, i64 }*, align 8
  %"cv2:l" = alloca i64, align 8
  %"for1:i" = alloca i64, align 8
  br label %body

body:                                             ; preds = %entry
  store { i8*, i64 }* %0, { i8*, i64 }** %"pm1:s", align 8
  store { i8*, i64 }* %1, { i8*, i64 }** %"pm2:r", align 8
  %temp_id_load = load { i8*, i64 }*, { i8*, i64 }** %"pm1:s", align 8
  %temp_call = call i64 @lla_strlen({ i8*, i64 }* %temp_id_load)
  store i64 %temp_call, i64* %"cv2:l", align 4
  %temp_id_load1 = load i64, i64* %"cv2:l", align 4
  %binary_int_sub = sub i64 %temp_id_load1, 1
  br label %for_check

for_check:                                        ; preds = %array_ref_bound_check_success6, %body
  %loop_var = phi i64 [ 0, %body ], [ %next_loop_var, %array_ref_bound_check_success6 ]
  store i64 %loop_var, i64* %"for1:i", align 4
  %cond = icmp sle i64 %loop_var, %binary_int_sub
  br i1 %cond, label %for_body, label %for_after

for_body:                                         ; preds = %for_check
  %array_struct_ptr = load { i8*, i64 }*, { i8*, i64 }** %"pm2:r", align 8
  %temp_id_load2 = load i64, i64* %"for1:i", align 4
  %temp_array_struct_ptr_load = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 1
  %temp_array_struct_load = load i64, i64* %temp_array_struct_ptr_load, align 4
  %array_lower_bound_check = icmp sle i64 0, %temp_id_load2
  %temp_cond_lower_and = and i1 true, %array_lower_bound_check
  %array_upper_bound_check = icmp slt i64 %temp_id_load2, %temp_array_struct_load
  %temp_cond_upper_and = and i1 %temp_cond_lower_and, %array_upper_bound_check
  br i1 %temp_cond_upper_and, label %array_ref_bound_check_success, label %array_ref_bound_check_failed

array_ref_bound_check_failed:                     ; preds = %array_ref_bound_check_failed, %for_body
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed

array_ref_bound_check_success:                    ; preds = %for_body
  %temp_array_struct_ptr_load3 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 0
  %temp_array_struct_load4 = load i8*, i8** %temp_array_struct_ptr_load3, align 8
  %temp_array_element_gep = getelementptr i8, i8* %temp_array_struct_load4, i64 %temp_id_load2
  %array_struct_ptr7 = load { i8*, i64 }*, { i8*, i64 }** %"pm1:s", align 8
  %temp_id_load8 = load i64, i64* %"cv2:l", align 4
  %temp_id_load9 = load i64, i64* %"for1:i", align 4
  %binary_int_sub10 = sub i64 %temp_id_load8, %temp_id_load9
  %binary_int_sub11 = sub i64 %binary_int_sub10, 1
  %temp_array_struct_ptr_load12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr7, i32 0, i32 1
  %temp_array_struct_load13 = load i64, i64* %temp_array_struct_ptr_load12, align 4
  %array_lower_bound_check14 = icmp sle i64 0, %binary_int_sub11
  %temp_cond_lower_and15 = and i1 true, %array_lower_bound_check14
  %array_upper_bound_check16 = icmp slt i64 %binary_int_sub11, %temp_array_struct_load13
  %temp_cond_upper_and17 = and i1 %temp_cond_lower_and15, %array_upper_bound_check16
  br i1 %temp_cond_upper_and17, label %array_ref_bound_check_success6, label %array_ref_bound_check_failed5

array_ref_bound_check_failed5:                    ; preds = %array_ref_bound_check_failed5, %array_ref_bound_check_success
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed5

array_ref_bound_check_success6:                   ; preds = %array_ref_bound_check_success
  %temp_array_struct_ptr_load18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr7, i32 0, i32 0
  %temp_array_struct_load19 = load i8*, i8** %temp_array_struct_ptr_load18, align 8
  %temp_array_element_gep20 = getelementptr i8, i8* %temp_array_struct_load19, i64 %binary_int_sub11
  %unary_ref = load i8, i8* %temp_array_element_gep20, align 1
  store i8 %unary_ref, i8* %temp_array_element_gep, align 1
  %next_loop_var = add i64 %loop_var, 1
  br label %for_check

for_after:                                        ; preds = %for_check
  %array_struct_ptr23 = load { i8*, i64 }*, { i8*, i64 }** %"pm2:r", align 8
  %temp_id_load24 = load i64, i64* %"cv2:l", align 4
  %temp_array_struct_ptr_load25 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr23, i32 0, i32 1
  %temp_array_struct_load26 = load i64, i64* %temp_array_struct_ptr_load25, align 4
  %array_lower_bound_check27 = icmp sle i64 0, %temp_id_load24
  %temp_cond_lower_and28 = and i1 true, %array_lower_bound_check27
  %array_upper_bound_check29 = icmp slt i64 %temp_id_load24, %temp_array_struct_load26
  %temp_cond_upper_and30 = and i1 %temp_cond_lower_and28, %array_upper_bound_check29
  br i1 %temp_cond_upper_and30, label %array_ref_bound_check_success22, label %array_ref_bound_check_failed21

array_ref_bound_check_failed21:                   ; preds = %array_ref_bound_check_failed21, %for_after
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed21

array_ref_bound_check_success22:                  ; preds = %for_after
  %temp_array_struct_ptr_load31 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr23, i32 0, i32 0
  %temp_array_struct_load32 = load i8*, i8** %temp_array_struct_ptr_load31, align 8
  %temp_array_element_gep33 = getelementptr i8, i8* %temp_array_struct_load32, i64 %temp_id_load24
  store i8 0, i8* %temp_array_element_gep33, align 1
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  ret i1 false
}

declare noalias i8* @malloc(i32)
