; ModuleID = 'llama'
source_filename = "llama"

@display_array = global [2 x i8*] zeroinitializer
@str = private unnamed_addr constant [33 x i8] c"Runtime Error: Division by zero\0A\00", align 1
@str.1 = private unnamed_addr constant [54 x i8] c"Runtime Error: Out of bounds error in array ref call\0A\00", align 1
@str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.4 = private unnamed_addr constant [65 x i8] c"Runtime Error: Non positive dimension size on array declaration\0A\00", align 1
@str.5 = private unnamed_addr constant [9 x i8] c"\0Atimes\0A\0A\00", align 1
@str.6 = private unnamed_addr constant [9 x i8] c"\0Amakes\0A\0A\00", align 1

declare i1 @lla_print_int(i64)

declare i1 @lla_print_bool(i1)

declare i1 @lla_print_char(i8)

declare i1 @lla_print_float(float)

declare i1 @lla_print_string({ i8*, i64 }*)

declare i64 @lla_read_int(i1)

declare i1 @lla_read_bool(i1)

declare i8 @lla_read_char(i1)

declare float @lla_read_float(i1)

declare i1 @lla_read_string({ i8*, i64 }*)

declare i64 @lla_abs(i64)

declare float @lla_fabs(float)

declare float @lla_sqrt(float)

declare float @lla_sin(float)

declare float @lla_cos(float)

declare float @lla_tan(float)

declare float @lla_atan(float)

declare float @lla_exp(float)

declare float @lla_ln(float)

declare float @lla_pi(i1)

declare i1 @lla_incr(i64*)

declare i1 @lla_decr(i64*)

declare float @lla_float_of_int(i64)

declare i64 @lla_int_of_float(float)

declare i64 @lla_round(float)

declare i64 @lla_int_of_char(i8)

declare i8 @lla_char_of_int(i64)

declare i64 @lla_strlen({ i8*, i64 }*)

declare i64 @lla_strcmp({ i8*, i64 }*, { i8*, i64 }*)

declare i1 @lla_strcpy({ i8*, i64 }*, { i8*, i64 }*)

declare i1 @lla_strcat({ i8*, i64 }*, { i8*, i64 }*)

declare float @lla_pow(float, float)

declare i1 @lla_exit_with_error({ i8*, i64 }*, i64)

declare i8* @GC_init()

declare i8* @GC_malloc(i64)

declare void @GC_register_finalizer(i8*, void (i8*, i8*)*, i8*, void (i8*, i8*)**, i8**)

define void @_free_array_of_malloc(i8* %0, i8* %1) {
entry:
  %array_struct_ptr = bitcast i8* %0 to { i8*, i64 }*
  %malloc_array_ptr_gep = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 0
  %malloc_array_ptr = load i8*, i8** %malloc_array_ptr_gep, align 8
  tail call void @free(i8* %malloc_array_ptr)
  ret void
}

declare void @free(i8*)

define void @_runtime_error(i8* %0, i64 %1) {
entry:
  %GC_malloc_call = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %array_struct_ptr = bitcast i8* %GC_malloc_call to { i8*, i64 }*
  %temp_struct_store_ptr = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 0
  store i8* %0, i8** %temp_struct_store_ptr, align 8
  %temp_struct_store_ptr1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 1
  store i64 %1, i64* %temp_struct_store_ptr1, align 4
  %lla_exit_with_error_call = call i1 @lla_exit_with_error({ i8*, i64 }* %array_struct_ptr, i64 1)
  ret void
}

define i64 @_binary_int_division(i64 %0, i64 %1) {
entry:
  %denom_zero_comp = icmp eq i64 0, %1
  br i1 %denom_zero_comp, label %runtime_error, label %body

runtime_error:                                    ; preds = %runtime_error, %entry
  call void @_runtime_error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str, i32 0, i32 0), i64 33)
  br label %runtime_error

body:                                             ; preds = %entry
  %division = sdiv i64 %0, %1
  ret i64 %division
}

define float @_binary_float_division(float %0, float %1) {
entry:
  %denom_zero_comp = fcmp oeq float 0.000000e+00, %1
  br i1 %denom_zero_comp, label %runtime_error, label %body

runtime_error:                                    ; preds = %runtime_error, %entry
  call void @_runtime_error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str, i32 0, i32 0), i64 33)
  br label %runtime_error

body:                                             ; preds = %entry
  %division = fdiv float %0, %1
  ret float %division
}

define i64 @main() {
entry:
  %0 = call i8* @GC_init()
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  %"main:frame_ptr" = alloca { i64* }, align 8
  %casted_elem_frame_ptr = bitcast { i64* }* %"main:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  %"cv1:init" = alloca i1, align 1
  %"cv2:main" = alloca i1, align 1
  %"ar1:x" = alloca { i64*, i64, i64 }*, align 8
  %"ar2:y" = alloca { i64*, i64, i64 }*, align 8
  %"ar3:z" = alloca { i64*, i64, i64 }*, align 8
  br label %body

body:                                             ; preds = %entry
  %display_array_ptr_load1 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr = bitcast i8* %display_array_ptr_load1 to { i64* }*
  %"mv1:seed:temp_gep" = getelementptr inbounds { i64* }, { i64* }* %casted_frame_ptr, i32 0, i32 0
  %GC_malloc_call = call i8* @GC_malloc(i64 8)
  %"mv1:seed_alloca_ptr" = bitcast i8* %GC_malloc_call to i64*
  store i64* %"mv1:seed_alloca_ptr", i64** %"mv1:seed:temp_gep", align 8
  %display_array_ptr_load2 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr3 = bitcast i8* %display_array_ptr_load2 to { i64* }*
  %"mv1:seed:temp_gep4" = getelementptr inbounds { i64* }, { i64* }* %casted_frame_ptr3, i32 0, i32 0
  %temp_id_load = load i64*, i64** %"mv1:seed:temp_gep4", align 8
  store i64 65, i64* %temp_id_load, align 4
  store i1 false, i1* %"cv1:init", align 1
  br i1 true, label %array_dec_dim_check_success, label %array_dec_dim_check_failed

array_dec_dim_check_failed:                       ; preds = %array_dec_dim_check_failed, %body
  call void @_runtime_error(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @str.4, i32 0, i32 0), i64 65)
  br label %array_dec_dim_check_failed

array_dec_dim_check_success:                      ; preds = %body
  %1 = trunc i64 12 to i32
  %mallocsize = mul i32 %1, ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i32)
  %malloccall = tail call i8* @malloc(i32 %mallocsize)
  %array_ptr = bitcast i8* %malloccall to i64*
  %GC_malloc_call5 = call i8* @GC_malloc(i64 24)
  call void @GC_register_finalizer(i8* %GC_malloc_call5, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %"ar1:x_struct_ptr" = bitcast i8* %GC_malloc_call5 to { i64*, i64, i64 }*
  store { i64*, i64, i64 }* %"ar1:x_struct_ptr", { i64*, i64, i64 }** %"ar1:x", align 8
  %temp_struct_store_ptr = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %"ar1:x_struct_ptr", i32 0, i32 0
  store i64* %array_ptr, i64** %temp_struct_store_ptr, align 8
  %temp_struct_store_ptr6 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %"ar1:x_struct_ptr", i32 0, i32 1
  store i64 3, i64* %temp_struct_store_ptr6, align 4
  %temp_struct_store_ptr7 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %"ar1:x_struct_ptr", i32 0, i32 2
  store i64 4, i64* %temp_struct_store_ptr7, align 4
  br i1 true, label %array_dec_dim_check_success9, label %array_dec_dim_check_failed8

array_dec_dim_check_failed8:                      ; preds = %array_dec_dim_check_failed8, %array_dec_dim_check_success
  call void @_runtime_error(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @str.4, i32 0, i32 0), i64 65)
  br label %array_dec_dim_check_failed8

array_dec_dim_check_success9:                     ; preds = %array_dec_dim_check_success
  %2 = trunc i64 20 to i32
  %mallocsize10 = mul i32 %2, ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i32)
  %malloccall11 = tail call i8* @malloc(i32 %mallocsize10)
  %array_ptr12 = bitcast i8* %malloccall11 to i64*
  %GC_malloc_call13 = call i8* @GC_malloc(i64 24)
  call void @GC_register_finalizer(i8* %GC_malloc_call13, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %"ar2:y_struct_ptr" = bitcast i8* %GC_malloc_call13 to { i64*, i64, i64 }*
  store { i64*, i64, i64 }* %"ar2:y_struct_ptr", { i64*, i64, i64 }** %"ar2:y", align 8
  %temp_struct_store_ptr14 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %"ar2:y_struct_ptr", i32 0, i32 0
  store i64* %array_ptr12, i64** %temp_struct_store_ptr14, align 8
  %temp_struct_store_ptr15 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %"ar2:y_struct_ptr", i32 0, i32 1
  store i64 4, i64* %temp_struct_store_ptr15, align 4
  %temp_struct_store_ptr16 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %"ar2:y_struct_ptr", i32 0, i32 2
  store i64 5, i64* %temp_struct_store_ptr16, align 4
  br i1 true, label %array_dec_dim_check_success18, label %array_dec_dim_check_failed17

array_dec_dim_check_failed17:                     ; preds = %array_dec_dim_check_failed17, %array_dec_dim_check_success9
  call void @_runtime_error(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @str.4, i32 0, i32 0), i64 65)
  br label %array_dec_dim_check_failed17

array_dec_dim_check_success18:                    ; preds = %array_dec_dim_check_success9
  %3 = trunc i64 15 to i32
  %mallocsize19 = mul i32 %3, ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i32)
  %malloccall20 = tail call i8* @malloc(i32 %mallocsize19)
  %array_ptr21 = bitcast i8* %malloccall20 to i64*
  %GC_malloc_call22 = call i8* @GC_malloc(i64 24)
  call void @GC_register_finalizer(i8* %GC_malloc_call22, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %"ar3:z_struct_ptr" = bitcast i8* %GC_malloc_call22 to { i64*, i64, i64 }*
  store { i64*, i64, i64 }* %"ar3:z_struct_ptr", { i64*, i64, i64 }** %"ar3:z", align 8
  %temp_struct_store_ptr23 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %"ar3:z_struct_ptr", i32 0, i32 0
  store i64* %array_ptr21, i64** %temp_struct_store_ptr23, align 8
  %temp_struct_store_ptr24 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %"ar3:z_struct_ptr", i32 0, i32 1
  store i64 3, i64* %temp_struct_store_ptr24, align 4
  %temp_struct_store_ptr25 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %"ar3:z_struct_ptr", i32 0, i32 2
  store i64 5, i64* %temp_struct_store_ptr25, align 4
  %temp_id_load26 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"ar1:x", align 8
  %temp_call = call i1 @"fn2:minit"({ i64*, i64, i64 }* %temp_id_load26)
  %temp_id_load27 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"ar2:y", align 8
  %temp_call28 = call i1 @"fn2:minit"({ i64*, i64, i64 }* %temp_id_load27)
  %temp_id_load29 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"ar1:x", align 8
  %temp_call30 = call i1 @"fn3:mprint"({ i64*, i64, i64 }* %temp_id_load29)
  %GC_malloc_call31 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call31, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr = bitcast i8* %GC_malloc_call31 to { i8*, i64 }*
  %temp_struct_store_ptr32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 0
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.5, i32 0, i32 0), i8** %temp_struct_store_ptr32, align 8
  %temp_struct_store_ptr33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 1
  store i64 9, i64* %temp_struct_store_ptr33, align 4
  %temp_call34 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr)
  %temp_id_load35 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"ar2:y", align 8
  %temp_call36 = call i1 @"fn3:mprint"({ i64*, i64, i64 }* %temp_id_load35)
  %GC_malloc_call37 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call37, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr38 = bitcast i8* %GC_malloc_call37 to { i8*, i64 }*
  %temp_struct_store_ptr39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr38, i32 0, i32 0
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.6, i32 0, i32 0), i8** %temp_struct_store_ptr39, align 8
  %temp_struct_store_ptr40 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr38, i32 0, i32 1
  store i64 9, i64* %temp_struct_store_ptr40, align 4
  %temp_call41 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr38)
  %temp_id_load42 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"ar1:x", align 8
  %temp_id_load43 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"ar2:y", align 8
  %temp_id_load44 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"ar3:z", align 8
  %temp_call45 = call i1 @"fn1:mmult"({ i64*, i64, i64 }* %temp_id_load42, { i64*, i64, i64 }* %temp_id_load43, { i64*, i64, i64 }* %temp_id_load44)
  %temp_id_load46 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"ar3:z", align 8
  %temp_call47 = call i1 @"fn3:mprint"({ i64*, i64, i64 }* %temp_id_load46)
  store i1 %temp_call47, i1* %"cv2:main", align 1
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  ret i64 0
}

define i1 @"fn1:mmult"({ i64*, i64, i64 }* %0, { i64*, i64, i64 }* %1, { i64*, i64, i64 }* %2) {
entry:
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  %"fn1:mmult:frame_ptr" = alloca {}, align 8
  %casted_elem_frame_ptr = bitcast {}* %"fn1:mmult:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  %"pm1:a" = alloca { i64*, i64, i64 }*, align 8
  %"pm2:b" = alloca { i64*, i64, i64 }*, align 8
  %"pm3:c" = alloca { i64*, i64, i64 }*, align 8
  %"for1:i" = alloca i64, align 8
  %"for2:j" = alloca i64, align 8
  %"for3:k" = alloca i64, align 8
  br label %body

body:                                             ; preds = %entry
  store { i64*, i64, i64 }* %0, { i64*, i64, i64 }** %"pm1:a", align 8
  store { i64*, i64, i64 }* %1, { i64*, i64, i64 }** %"pm2:b", align 8
  store { i64*, i64, i64 }* %2, { i64*, i64, i64 }** %"pm3:c", align 8
  %array_struct_ptr = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm1:a", align 8
  %temp_struct_dim_ptr = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr, i32 0, i32 2
  %temp_struct_dim_load = load i64, i64* %temp_struct_dim_ptr, align 4
  %array_struct_ptr1 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm2:b", align 8
  %temp_struct_dim_ptr2 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr1, i32 0, i32 1
  %temp_struct_dim_load3 = load i64, i64* %temp_struct_dim_ptr2, align 4
  %int_equality_check = icmp eq i64 %temp_struct_dim_load, %temp_struct_dim_load3
  %short_circuit_check = icmp eq i1 false, %int_equality_check
  br i1 %short_circuit_check, label %logical_continue, label %logical_non_short_circuit

if_then:                                          ; preds = %logical_continue12
  %array_struct_ptr23 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm3:c", align 8
  %temp_struct_dim_ptr24 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr23, i32 0, i32 1
  %temp_struct_dim_load25 = load i64, i64* %temp_struct_dim_ptr24, align 4
  %binary_int_sub = sub i64 %temp_struct_dim_load25, 1
  br label %for_check

logical_non_short_circuit:                        ; preds = %body
  %array_struct_ptr4 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm3:c", align 8
  %temp_struct_dim_ptr5 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr4, i32 0, i32 1
  %temp_struct_dim_load6 = load i64, i64* %temp_struct_dim_ptr5, align 4
  %array_struct_ptr7 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm1:a", align 8
  %temp_struct_dim_ptr8 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr7, i32 0, i32 1
  %temp_struct_dim_load9 = load i64, i64* %temp_struct_dim_ptr8, align 4
  %int_equality_check10 = icmp eq i64 %temp_struct_dim_load6, %temp_struct_dim_load9
  %logical_function = and i1 %int_equality_check, %int_equality_check10
  br label %logical_continue

logical_continue:                                 ; preds = %logical_non_short_circuit, %body
  %temp_phi = phi i1 [ false, %body ], [ %logical_function, %logical_non_short_circuit ]
  %short_circuit_check13 = icmp eq i1 false, %temp_phi
  br i1 %short_circuit_check13, label %logical_continue12, label %logical_non_short_circuit11

logical_non_short_circuit11:                      ; preds = %logical_continue
  %array_struct_ptr14 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm3:c", align 8
  %temp_struct_dim_ptr15 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr14, i32 0, i32 2
  %temp_struct_dim_load16 = load i64, i64* %temp_struct_dim_ptr15, align 4
  %array_struct_ptr17 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm2:b", align 8
  %temp_struct_dim_ptr18 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr17, i32 0, i32 2
  %temp_struct_dim_load19 = load i64, i64* %temp_struct_dim_ptr18, align 4
  %int_equality_check20 = icmp eq i64 %temp_struct_dim_load16, %temp_struct_dim_load19
  %logical_function21 = and i1 %temp_phi, %int_equality_check20
  br label %logical_continue12

logical_continue12:                               ; preds = %logical_non_short_circuit11, %logical_continue
  %temp_phi22 = phi i1 [ false, %logical_continue ], [ %logical_function21, %logical_non_short_circuit11 ]
  br i1 %temp_phi22, label %if_then, label %if_else

for_check:                                        ; preds = %for_after28, %if_then
  %loop_var = phi i64 [ 0, %if_then ], [ %next_loop_var145, %for_after28 ]
  store i64 %loop_var, i64* %"for1:i", align 4
  %cond = icmp sle i64 %loop_var, %binary_int_sub
  br i1 %cond, label %for_body, label %for_after

for_body:                                         ; preds = %for_check
  %array_struct_ptr29 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm3:c", align 8
  %temp_struct_dim_ptr30 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr29, i32 0, i32 2
  %temp_struct_dim_load31 = load i64, i64* %temp_struct_dim_ptr30, align 4
  %binary_int_sub32 = sub i64 %temp_struct_dim_load31, 1
  br label %for_check26

for_check26:                                      ; preds = %for_after47, %for_body
  %loop_var33 = phi i64 [ 0, %for_body ], [ %next_loop_var144, %for_after47 ]
  store i64 %loop_var33, i64* %"for2:j", align 4
  %cond34 = icmp sle i64 %loop_var33, %binary_int_sub32
  br i1 %cond34, label %for_body27, label %for_after28

for_body27:                                       ; preds = %for_check26
  %array_struct_ptr35 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm3:c", align 8
  %temp_id_load = load i64, i64* %"for1:i", align 4
  %temp_id_load36 = load i64, i64* %"for2:j", align 4
  %temp_array_struct_ptr_load = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr35, i32 0, i32 1
  %temp_array_struct_load = load i64, i64* %temp_array_struct_ptr_load, align 4
  %temp_array_struct_ptr_load37 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr35, i32 0, i32 2
  %temp_array_struct_load38 = load i64, i64* %temp_array_struct_ptr_load37, align 4
  %array_lower_bound_check = icmp sle i64 0, %temp_id_load
  %temp_cond_lower_and = and i1 true, %array_lower_bound_check
  %array_upper_bound_check = icmp slt i64 %temp_id_load, %temp_array_struct_load
  %temp_cond_upper_and = and i1 %temp_cond_lower_and, %array_upper_bound_check
  %array_lower_bound_check39 = icmp sle i64 0, %temp_id_load36
  %temp_cond_lower_and40 = and i1 %temp_cond_upper_and, %array_lower_bound_check39
  %array_upper_bound_check41 = icmp slt i64 %temp_id_load36, %temp_array_struct_load38
  %temp_cond_upper_and42 = and i1 %temp_cond_lower_and40, %array_upper_bound_check41
  br i1 %temp_cond_upper_and42, label %array_ref_bound_check_success, label %array_ref_bound_check_failed

array_ref_bound_check_failed:                     ; preds = %array_ref_bound_check_failed, %for_body27
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed

array_ref_bound_check_success:                    ; preds = %for_body27
  %temp_dim_offset_mul = mul i64 %temp_id_load, %temp_array_struct_load38
  %temp_add_array_index = add i64 %temp_id_load36, %temp_dim_offset_mul
  %temp_array_struct_ptr_load43 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr35, i32 0, i32 0
  %temp_array_struct_load44 = load i64*, i64** %temp_array_struct_ptr_load43, align 8
  %temp_array_element_gep = getelementptr i64, i64* %temp_array_struct_load44, i64 %temp_add_array_index
  store i64 0, i64* %temp_array_element_gep, align 4
  %array_struct_ptr48 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm1:a", align 8
  %temp_struct_dim_ptr49 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr48, i32 0, i32 2
  %temp_struct_dim_load50 = load i64, i64* %temp_struct_dim_ptr49, align 4
  %binary_int_sub51 = sub i64 %temp_struct_dim_load50, 1
  br label %for_check45

for_check45:                                      ; preds = %array_ref_bound_check_success122, %array_ref_bound_check_success
  %loop_var52 = phi i64 [ 0, %array_ref_bound_check_success ], [ %next_loop_var, %array_ref_bound_check_success122 ]
  store i64 %loop_var52, i64* %"for3:k", align 4
  %cond53 = icmp sle i64 %loop_var52, %binary_int_sub51
  br i1 %cond53, label %for_body46, label %for_after47

for_body46:                                       ; preds = %for_check45
  %array_struct_ptr56 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm3:c", align 8
  %temp_id_load57 = load i64, i64* %"for1:i", align 4
  %temp_id_load58 = load i64, i64* %"for2:j", align 4
  %temp_array_struct_ptr_load59 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr56, i32 0, i32 1
  %temp_array_struct_load60 = load i64, i64* %temp_array_struct_ptr_load59, align 4
  %temp_array_struct_ptr_load61 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr56, i32 0, i32 2
  %temp_array_struct_load62 = load i64, i64* %temp_array_struct_ptr_load61, align 4
  %array_lower_bound_check63 = icmp sle i64 0, %temp_id_load57
  %temp_cond_lower_and64 = and i1 true, %array_lower_bound_check63
  %array_upper_bound_check65 = icmp slt i64 %temp_id_load57, %temp_array_struct_load60
  %temp_cond_upper_and66 = and i1 %temp_cond_lower_and64, %array_upper_bound_check65
  %array_lower_bound_check67 = icmp sle i64 0, %temp_id_load58
  %temp_cond_lower_and68 = and i1 %temp_cond_upper_and66, %array_lower_bound_check67
  %array_upper_bound_check69 = icmp slt i64 %temp_id_load58, %temp_array_struct_load62
  %temp_cond_upper_and70 = and i1 %temp_cond_lower_and68, %array_upper_bound_check69
  br i1 %temp_cond_upper_and70, label %array_ref_bound_check_success55, label %array_ref_bound_check_failed54

array_ref_bound_check_failed54:                   ; preds = %array_ref_bound_check_failed54, %for_body46
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed54

array_ref_bound_check_success55:                  ; preds = %for_body46
  %temp_dim_offset_mul71 = mul i64 %temp_id_load57, %temp_array_struct_load62
  %temp_add_array_index72 = add i64 %temp_id_load58, %temp_dim_offset_mul71
  %temp_array_struct_ptr_load73 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr56, i32 0, i32 0
  %temp_array_struct_load74 = load i64*, i64** %temp_array_struct_ptr_load73, align 8
  %temp_array_element_gep75 = getelementptr i64, i64* %temp_array_struct_load74, i64 %temp_add_array_index72
  %array_struct_ptr78 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm3:c", align 8
  %temp_id_load79 = load i64, i64* %"for1:i", align 4
  %temp_id_load80 = load i64, i64* %"for2:j", align 4
  %temp_array_struct_ptr_load81 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr78, i32 0, i32 1
  %temp_array_struct_load82 = load i64, i64* %temp_array_struct_ptr_load81, align 4
  %temp_array_struct_ptr_load83 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr78, i32 0, i32 2
  %temp_array_struct_load84 = load i64, i64* %temp_array_struct_ptr_load83, align 4
  %array_lower_bound_check85 = icmp sle i64 0, %temp_id_load79
  %temp_cond_lower_and86 = and i1 true, %array_lower_bound_check85
  %array_upper_bound_check87 = icmp slt i64 %temp_id_load79, %temp_array_struct_load82
  %temp_cond_upper_and88 = and i1 %temp_cond_lower_and86, %array_upper_bound_check87
  %array_lower_bound_check89 = icmp sle i64 0, %temp_id_load80
  %temp_cond_lower_and90 = and i1 %temp_cond_upper_and88, %array_lower_bound_check89
  %array_upper_bound_check91 = icmp slt i64 %temp_id_load80, %temp_array_struct_load84
  %temp_cond_upper_and92 = and i1 %temp_cond_lower_and90, %array_upper_bound_check91
  br i1 %temp_cond_upper_and92, label %array_ref_bound_check_success77, label %array_ref_bound_check_failed76

array_ref_bound_check_failed76:                   ; preds = %array_ref_bound_check_failed76, %array_ref_bound_check_success55
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed76

array_ref_bound_check_success77:                  ; preds = %array_ref_bound_check_success55
  %temp_dim_offset_mul93 = mul i64 %temp_id_load79, %temp_array_struct_load84
  %temp_add_array_index94 = add i64 %temp_id_load80, %temp_dim_offset_mul93
  %temp_array_struct_ptr_load95 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr78, i32 0, i32 0
  %temp_array_struct_load96 = load i64*, i64** %temp_array_struct_ptr_load95, align 8
  %temp_array_element_gep97 = getelementptr i64, i64* %temp_array_struct_load96, i64 %temp_add_array_index94
  %unary_ref = load i64, i64* %temp_array_element_gep97, align 4
  %array_struct_ptr100 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm1:a", align 8
  %temp_id_load101 = load i64, i64* %"for1:i", align 4
  %temp_id_load102 = load i64, i64* %"for3:k", align 4
  %temp_array_struct_ptr_load103 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr100, i32 0, i32 1
  %temp_array_struct_load104 = load i64, i64* %temp_array_struct_ptr_load103, align 4
  %temp_array_struct_ptr_load105 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr100, i32 0, i32 2
  %temp_array_struct_load106 = load i64, i64* %temp_array_struct_ptr_load105, align 4
  %array_lower_bound_check107 = icmp sle i64 0, %temp_id_load101
  %temp_cond_lower_and108 = and i1 true, %array_lower_bound_check107
  %array_upper_bound_check109 = icmp slt i64 %temp_id_load101, %temp_array_struct_load104
  %temp_cond_upper_and110 = and i1 %temp_cond_lower_and108, %array_upper_bound_check109
  %array_lower_bound_check111 = icmp sle i64 0, %temp_id_load102
  %temp_cond_lower_and112 = and i1 %temp_cond_upper_and110, %array_lower_bound_check111
  %array_upper_bound_check113 = icmp slt i64 %temp_id_load102, %temp_array_struct_load106
  %temp_cond_upper_and114 = and i1 %temp_cond_lower_and112, %array_upper_bound_check113
  br i1 %temp_cond_upper_and114, label %array_ref_bound_check_success99, label %array_ref_bound_check_failed98

array_ref_bound_check_failed98:                   ; preds = %array_ref_bound_check_failed98, %array_ref_bound_check_success77
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed98

array_ref_bound_check_success99:                  ; preds = %array_ref_bound_check_success77
  %temp_dim_offset_mul115 = mul i64 %temp_id_load101, %temp_array_struct_load106
  %temp_add_array_index116 = add i64 %temp_id_load102, %temp_dim_offset_mul115
  %temp_array_struct_ptr_load117 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr100, i32 0, i32 0
  %temp_array_struct_load118 = load i64*, i64** %temp_array_struct_ptr_load117, align 8
  %temp_array_element_gep119 = getelementptr i64, i64* %temp_array_struct_load118, i64 %temp_add_array_index116
  %unary_ref120 = load i64, i64* %temp_array_element_gep119, align 4
  %array_struct_ptr123 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm2:b", align 8
  %temp_id_load124 = load i64, i64* %"for3:k", align 4
  %temp_id_load125 = load i64, i64* %"for2:j", align 4
  %temp_array_struct_ptr_load126 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr123, i32 0, i32 1
  %temp_array_struct_load127 = load i64, i64* %temp_array_struct_ptr_load126, align 4
  %temp_array_struct_ptr_load128 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr123, i32 0, i32 2
  %temp_array_struct_load129 = load i64, i64* %temp_array_struct_ptr_load128, align 4
  %array_lower_bound_check130 = icmp sle i64 0, %temp_id_load124
  %temp_cond_lower_and131 = and i1 true, %array_lower_bound_check130
  %array_upper_bound_check132 = icmp slt i64 %temp_id_load124, %temp_array_struct_load127
  %temp_cond_upper_and133 = and i1 %temp_cond_lower_and131, %array_upper_bound_check132
  %array_lower_bound_check134 = icmp sle i64 0, %temp_id_load125
  %temp_cond_lower_and135 = and i1 %temp_cond_upper_and133, %array_lower_bound_check134
  %array_upper_bound_check136 = icmp slt i64 %temp_id_load125, %temp_array_struct_load129
  %temp_cond_upper_and137 = and i1 %temp_cond_lower_and135, %array_upper_bound_check136
  br i1 %temp_cond_upper_and137, label %array_ref_bound_check_success122, label %array_ref_bound_check_failed121

array_ref_bound_check_failed121:                  ; preds = %array_ref_bound_check_failed121, %array_ref_bound_check_success99
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed121

array_ref_bound_check_success122:                 ; preds = %array_ref_bound_check_success99
  %temp_dim_offset_mul138 = mul i64 %temp_id_load124, %temp_array_struct_load129
  %temp_add_array_index139 = add i64 %temp_id_load125, %temp_dim_offset_mul138
  %temp_array_struct_ptr_load140 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr123, i32 0, i32 0
  %temp_array_struct_load141 = load i64*, i64** %temp_array_struct_ptr_load140, align 8
  %temp_array_element_gep142 = getelementptr i64, i64* %temp_array_struct_load141, i64 %temp_add_array_index139
  %unary_ref143 = load i64, i64* %temp_array_element_gep142, align 4
  %binary_int_mul = mul i64 %unary_ref120, %unary_ref143
  %binary_int_add = add i64 %unary_ref, %binary_int_mul
  store i64 %binary_int_add, i64* %temp_array_element_gep75, align 4
  %next_loop_var = add i64 %loop_var52, 1
  br label %for_check45

for_after47:                                      ; preds = %for_check45
  %next_loop_var144 = add i64 %loop_var33, 1
  br label %for_check26

for_after28:                                      ; preds = %for_check26
  %next_loop_var145 = add i64 %loop_var, 1
  br label %for_check

for_after:                                        ; preds = %for_check
  br label %if_merge

if_else:                                          ; preds = %logical_continue12
  br label %if_merge

if_merge:                                         ; preds = %if_else, %for_after
  %temp_phi146 = phi i1 [ false, %for_after ], [ false, %if_else ]
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  ret i1 %temp_phi146
}

define i1 @"fn2:minit"({ i64*, i64, i64 }* %0) {
entry:
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  %"fn2:minit:frame_ptr" = alloca {}, align 8
  %casted_elem_frame_ptr = bitcast {}* %"fn2:minit:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  %"pm4:m" = alloca { i64*, i64, i64 }*, align 8
  %"for4:i" = alloca i64, align 8
  %"for5:j" = alloca i64, align 8
  br label %body

body:                                             ; preds = %entry
  store { i64*, i64, i64 }* %0, { i64*, i64, i64 }** %"pm4:m", align 8
  %array_struct_ptr = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm4:m", align 8
  %temp_struct_dim_ptr = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr, i32 0, i32 1
  %temp_struct_dim_load = load i64, i64* %temp_struct_dim_ptr, align 4
  %binary_int_sub = sub i64 %temp_struct_dim_load, 1
  br label %for_check

for_check:                                        ; preds = %for_after3, %body
  %loop_var = phi i64 [ 0, %body ], [ %next_loop_var35, %for_after3 ]
  store i64 %loop_var, i64* %"for4:i", align 4
  %cond = icmp sle i64 %loop_var, %binary_int_sub
  br i1 %cond, label %for_body, label %for_after

for_body:                                         ; preds = %for_check
  %array_struct_ptr4 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm4:m", align 8
  %temp_struct_dim_ptr5 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr4, i32 0, i32 2
  %temp_struct_dim_load6 = load i64, i64* %temp_struct_dim_ptr5, align 4
  %binary_int_sub7 = sub i64 %temp_struct_dim_load6, 1
  br label %for_check1

for_check1:                                       ; preds = %array_ref_bound_check_success, %for_body
  %loop_var8 = phi i64 [ 0, %for_body ], [ %next_loop_var, %array_ref_bound_check_success ]
  store i64 %loop_var8, i64* %"for5:j", align 4
  %cond9 = icmp sle i64 %loop_var8, %binary_int_sub7
  br i1 %cond9, label %for_body2, label %for_after3

for_body2:                                        ; preds = %for_check1
  %display_array_ptr_load10 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr = bitcast i8* %display_array_ptr_load10 to { i64* }*
  %"mv1:seed:temp_gep" = getelementptr inbounds { i64* }, { i64* }* %casted_frame_ptr, i32 0, i32 0
  %temp_id_load = load i64*, i64** %"mv1:seed:temp_gep", align 8
  %display_array_ptr_load11 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr12 = bitcast i8* %display_array_ptr_load11 to { i64* }*
  %"mv1:seed:temp_gep13" = getelementptr inbounds { i64* }, { i64* }* %casted_frame_ptr12, i32 0, i32 0
  %temp_id_load14 = load i64*, i64** %"mv1:seed:temp_gep13", align 8
  %unary_ref = load i64, i64* %temp_id_load14, align 4
  %binary_int_mul = mul i64 %unary_ref, 137
  %temp_id_load15 = load i64, i64* %"for4:i", align 4
  %binary_int_mul16 = mul i64 2, %temp_id_load15
  %binary_int_add = add i64 %binary_int_mul, %binary_int_mul16
  %temp_id_load17 = load i64, i64* %"for5:j", align 4
  %binary_int_add18 = add i64 %binary_int_add, %temp_id_load17
  %binary_int_mod = srem i64 %binary_int_add18, 101
  store i64 %binary_int_mod, i64* %temp_id_load, align 4
  %array_struct_ptr19 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm4:m", align 8
  %temp_id_load20 = load i64, i64* %"for4:i", align 4
  %temp_id_load21 = load i64, i64* %"for5:j", align 4
  %temp_array_struct_ptr_load = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr19, i32 0, i32 1
  %temp_array_struct_load = load i64, i64* %temp_array_struct_ptr_load, align 4
  %temp_array_struct_ptr_load22 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr19, i32 0, i32 2
  %temp_array_struct_load23 = load i64, i64* %temp_array_struct_ptr_load22, align 4
  %array_lower_bound_check = icmp sle i64 0, %temp_id_load20
  %temp_cond_lower_and = and i1 true, %array_lower_bound_check
  %array_upper_bound_check = icmp slt i64 %temp_id_load20, %temp_array_struct_load
  %temp_cond_upper_and = and i1 %temp_cond_lower_and, %array_upper_bound_check
  %array_lower_bound_check24 = icmp sle i64 0, %temp_id_load21
  %temp_cond_lower_and25 = and i1 %temp_cond_upper_and, %array_lower_bound_check24
  %array_upper_bound_check26 = icmp slt i64 %temp_id_load21, %temp_array_struct_load23
  %temp_cond_upper_and27 = and i1 %temp_cond_lower_and25, %array_upper_bound_check26
  br i1 %temp_cond_upper_and27, label %array_ref_bound_check_success, label %array_ref_bound_check_failed

array_ref_bound_check_failed:                     ; preds = %array_ref_bound_check_failed, %for_body2
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed

array_ref_bound_check_success:                    ; preds = %for_body2
  %temp_dim_offset_mul = mul i64 %temp_id_load20, %temp_array_struct_load23
  %temp_add_array_index = add i64 %temp_id_load21, %temp_dim_offset_mul
  %temp_array_struct_ptr_load28 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr19, i32 0, i32 0
  %temp_array_struct_load29 = load i64*, i64** %temp_array_struct_ptr_load28, align 8
  %temp_array_element_gep = getelementptr i64, i64* %temp_array_struct_load29, i64 %temp_add_array_index
  %display_array_ptr_load30 = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 0), align 8
  %casted_frame_ptr31 = bitcast i8* %display_array_ptr_load30 to { i64* }*
  %"mv1:seed:temp_gep32" = getelementptr inbounds { i64* }, { i64* }* %casted_frame_ptr31, i32 0, i32 0
  %temp_id_load33 = load i64*, i64** %"mv1:seed:temp_gep32", align 8
  %unary_ref34 = load i64, i64* %temp_id_load33, align 4
  store i64 %unary_ref34, i64* %temp_array_element_gep, align 4
  %next_loop_var = add i64 %loop_var8, 1
  br label %for_check1

for_after3:                                       ; preds = %for_check1
  %next_loop_var35 = add i64 %loop_var, 1
  br label %for_check

for_after:                                        ; preds = %for_check
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  ret i1 false
}

define i1 @"fn3:mprint"({ i64*, i64, i64 }* %0) {
entry:
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  %"fn3:mprint:frame_ptr" = alloca {}, align 8
  %casted_elem_frame_ptr = bitcast {}* %"fn3:mprint:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  %"pm5:m" = alloca { i64*, i64, i64 }*, align 8
  %"for6:i" = alloca i64, align 8
  %"for7:j" = alloca i64, align 8
  br label %body

body:                                             ; preds = %entry
  store { i64*, i64, i64 }* %0, { i64*, i64, i64 }** %"pm5:m", align 8
  %array_struct_ptr = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm5:m", align 8
  %temp_struct_dim_ptr = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr, i32 0, i32 1
  %temp_struct_dim_load = load i64, i64* %temp_struct_dim_ptr, align 4
  %binary_int_sub = sub i64 %temp_struct_dim_load, 1
  br label %for_check

for_check:                                        ; preds = %for_after3, %body
  %loop_var = phi i64 [ 0, %body ], [ %next_loop_var27, %for_after3 ]
  store i64 %loop_var, i64* %"for6:i", align 4
  %cond = icmp sle i64 %loop_var, %binary_int_sub
  br i1 %cond, label %for_body, label %for_after

for_body:                                         ; preds = %for_check
  %array_struct_ptr4 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm5:m", align 8
  %temp_struct_dim_ptr5 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr4, i32 0, i32 2
  %temp_struct_dim_load6 = load i64, i64* %temp_struct_dim_ptr5, align 4
  %binary_int_sub7 = sub i64 %temp_struct_dim_load6, 1
  br label %for_check1

for_check1:                                       ; preds = %array_ref_bound_check_success, %for_body
  %loop_var8 = phi i64 [ 0, %for_body ], [ %next_loop_var, %array_ref_bound_check_success ]
  store i64 %loop_var8, i64* %"for7:j", align 4
  %cond9 = icmp sle i64 %loop_var8, %binary_int_sub7
  br i1 %cond9, label %for_body2, label %for_after3

for_body2:                                        ; preds = %for_check1
  %array_struct_ptr10 = load { i64*, i64, i64 }*, { i64*, i64, i64 }** %"pm5:m", align 8
  %temp_id_load = load i64, i64* %"for6:i", align 4
  %temp_id_load11 = load i64, i64* %"for7:j", align 4
  %temp_array_struct_ptr_load = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr10, i32 0, i32 1
  %temp_array_struct_load = load i64, i64* %temp_array_struct_ptr_load, align 4
  %temp_array_struct_ptr_load12 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr10, i32 0, i32 2
  %temp_array_struct_load13 = load i64, i64* %temp_array_struct_ptr_load12, align 4
  %array_lower_bound_check = icmp sle i64 0, %temp_id_load
  %temp_cond_lower_and = and i1 true, %array_lower_bound_check
  %array_upper_bound_check = icmp slt i64 %temp_id_load, %temp_array_struct_load
  %temp_cond_upper_and = and i1 %temp_cond_lower_and, %array_upper_bound_check
  %array_lower_bound_check14 = icmp sle i64 0, %temp_id_load11
  %temp_cond_lower_and15 = and i1 %temp_cond_upper_and, %array_lower_bound_check14
  %array_upper_bound_check16 = icmp slt i64 %temp_id_load11, %temp_array_struct_load13
  %temp_cond_upper_and17 = and i1 %temp_cond_lower_and15, %array_upper_bound_check16
  br i1 %temp_cond_upper_and17, label %array_ref_bound_check_success, label %array_ref_bound_check_failed

array_ref_bound_check_failed:                     ; preds = %array_ref_bound_check_failed, %for_body2
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed

array_ref_bound_check_success:                    ; preds = %for_body2
  %temp_dim_offset_mul = mul i64 %temp_id_load, %temp_array_struct_load13
  %temp_add_array_index = add i64 %temp_id_load11, %temp_dim_offset_mul
  %temp_array_struct_ptr_load18 = getelementptr inbounds { i64*, i64, i64 }, { i64*, i64, i64 }* %array_struct_ptr10, i32 0, i32 0
  %temp_array_struct_load19 = load i64*, i64** %temp_array_struct_ptr_load18, align 8
  %temp_array_element_gep = getelementptr i64, i64* %temp_array_struct_load19, i64 %temp_add_array_index
  %unary_ref = load i64, i64* %temp_array_element_gep, align 4
  %temp_call = call i1 @lla_print_int(i64 %unary_ref)
  %GC_malloc_call = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr = bitcast i8* %GC_malloc_call to { i8*, i64 }*
  %temp_struct_store_ptr = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.2, i32 0, i32 0), i8** %temp_struct_store_ptr, align 8
  %temp_struct_store_ptr20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 1
  store i64 2, i64* %temp_struct_store_ptr20, align 4
  %temp_call21 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr)
  %next_loop_var = add i64 %loop_var8, 1
  br label %for_check1

for_after3:                                       ; preds = %for_check1
  %GC_malloc_call22 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call22, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr23 = bitcast i8* %GC_malloc_call22 to { i8*, i64 }*
  %temp_struct_store_ptr24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr23, i32 0, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.3, i32 0, i32 0), i8** %temp_struct_store_ptr24, align 8
  %temp_struct_store_ptr25 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr23, i32 0, i32 1
  store i64 2, i64* %temp_struct_store_ptr25, align 4
  %temp_call26 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr23)
  %next_loop_var27 = add i64 %loop_var, 1
  br label %for_check

for_after:                                        ; preds = %for_check
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @display_array, i64 0, i64 1), align 8
  ret i1 false
}

declare noalias i8* @malloc(i32)
