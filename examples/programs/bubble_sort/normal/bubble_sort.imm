; ModuleID = 'llama'
source_filename = "llama"

@display_array = global [3 x i8*] zeroinitializer
@str = private unnamed_addr constant [33 x i8] c"Runtime Error: Division by zero\0A\00", align 1
@str.1 = private unnamed_addr constant [54 x i8] c"Runtime Error: Out of bounds error in array ref call\0A\00", align 1
@str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.4 = private unnamed_addr constant [65 x i8] c"Runtime Error: Non positive dimension size on array declaration\0A\00", align 1
@str.5 = private unnamed_addr constant [16 x i8] c"Initial array: \00", align 1
@str.6 = private unnamed_addr constant [15 x i8] c"Sorted array: \00", align 1

declare i1 @lla_print_int(i64)

declare i1 @lla_print_bool(i1)

declare i1 @lla_print_char(i8)

declare i1 @lla_print_float(float)

declare i1 @lla_print_string({ i8*, i64 }*)

declare i64 @lla_read_int(i1)

declare i1 @lla_read_bool(i1)

declare i8 @lla_read_char(i1)

declare float @lla_read_float(i1)

declare i1 @lla_read_string({ i8*, i64 }*)

declare i64 @lla_abs(i64)

declare float @lla_fabs(float)

declare float @lla_sqrt(float)

declare float @lla_sin(float)

declare float @lla_cos(float)

declare float @lla_tan(float)

declare float @lla_atan(float)

declare float @lla_exp(float)

declare float @lla_ln(float)

declare float @lla_pi(i1)

declare i1 @lla_incr(i64*)

declare i1 @lla_decr(i64*)

declare float @lla_float_of_int(i64)

declare i64 @lla_int_of_float(float)

declare i64 @lla_round(float)

declare i64 @lla_int_of_char(i8)

declare i8 @lla_char_of_int(i64)

declare i64 @lla_strlen({ i8*, i64 }*)

declare i64 @lla_strcmp({ i8*, i64 }*, { i8*, i64 }*)

declare i1 @lla_strcpy({ i8*, i64 }*, { i8*, i64 }*)

declare i1 @lla_strcat({ i8*, i64 }*, { i8*, i64 }*)

declare float @lla_pow(float, float)

declare i1 @lla_exit_with_error({ i8*, i64 }*, i64)

declare i8* @GC_init()

declare i8* @GC_malloc(i64)

declare void @GC_register_finalizer(i8*, void (i8*, i8*)*, i8*, void (i8*, i8*)**, i8**)

define void @_free_array_of_malloc(i8* %0, i8* %1) {
entry:
  %array_struct_ptr = bitcast i8* %0 to { i8*, i64 }*
  %malloc_array_ptr_gep = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 0
  %malloc_array_ptr = load i8*, i8** %malloc_array_ptr_gep, align 8
  tail call void @free(i8* %malloc_array_ptr)
  ret void
}

declare void @free(i8*)

define void @_runtime_error(i8* %0, i64 %1) {
entry:
  %GC_malloc_call = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %array_struct_ptr = bitcast i8* %GC_malloc_call to { i8*, i64 }*
  %temp_struct_store_ptr = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 0
  store i8* %0, i8** %temp_struct_store_ptr, align 8
  %temp_struct_store_ptr1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %array_struct_ptr, i32 0, i32 1
  store i64 %1, i64* %temp_struct_store_ptr1, align 4
  %lla_exit_with_error_call = call i1 @lla_exit_with_error({ i8*, i64 }* %array_struct_ptr, i64 1)
  ret void
}

define i64 @_binary_int_division(i64 %0, i64 %1) {
entry:
  %denom_zero_comp = icmp eq i64 0, %1
  br i1 %denom_zero_comp, label %runtime_error, label %body

runtime_error:                                    ; preds = %runtime_error, %entry
  call void @_runtime_error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str, i32 0, i32 0), i64 33)
  br label %runtime_error

body:                                             ; preds = %entry
  %division = sdiv i64 %0, %1
  ret i64 %division
}

define float @_binary_float_division(float %0, float %1) {
entry:
  %denom_zero_comp = fcmp oeq float 0.000000e+00, %1
  br i1 %denom_zero_comp, label %runtime_error, label %body

runtime_error:                                    ; preds = %runtime_error, %entry
  call void @_runtime_error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str, i32 0, i32 0), i64 33)
  br label %runtime_error

body:                                             ; preds = %entry
  %division = fdiv float %0, %1
  ret float %division
}

define i64 @main() {
entry:
  %0 = call i8* @GC_init()
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %"main:frame_ptr" = alloca {}, align 8
  %casted_elem_frame_ptr = bitcast {}* %"main:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  %"cv2:main" = alloca i1, align 1
  %"mv2:seed" = alloca i64*, align 8
  %"ar1:x" = alloca { i64*, i64 }*, align 8
  %"for3:i" = alloca i64, align 8
  br label %body

body:                                             ; preds = %entry
  %GC_malloc_call = call i8* @GC_malloc(i64 8)
  %"mv2:seed_alloca_ptr" = bitcast i8* %GC_malloc_call to i64*
  store i64* %"mv2:seed_alloca_ptr", i64** %"mv2:seed", align 8
  br i1 true, label %array_dec_dim_check_success, label %array_dec_dim_check_failed

array_dec_dim_check_failed:                       ; preds = %array_dec_dim_check_failed, %body
  call void @_runtime_error(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @str.4, i32 0, i32 0), i64 65)
  br label %array_dec_dim_check_failed

array_dec_dim_check_success:                      ; preds = %body
  %1 = trunc i64 16 to i32
  %mallocsize = mul i32 %1, ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i32)
  %malloccall = tail call i8* @malloc(i32 %mallocsize)
  %array_ptr = bitcast i8* %malloccall to i64*
  %GC_malloc_call1 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call1, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %"ar1:x_struct_ptr" = bitcast i8* %GC_malloc_call1 to { i64*, i64 }*
  store { i64*, i64 }* %"ar1:x_struct_ptr", { i64*, i64 }** %"ar1:x", align 8
  %temp_struct_store_ptr = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %"ar1:x_struct_ptr", i32 0, i32 0
  store i64* %array_ptr, i64** %temp_struct_store_ptr, align 8
  %temp_struct_store_ptr2 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %"ar1:x_struct_ptr", i32 0, i32 1
  store i64 16, i64* %temp_struct_store_ptr2, align 4
  %temp_id_load = load i64*, i64** %"mv2:seed", align 8
  store i64 65, i64* %temp_id_load, align 4
  br label %for_check

for_check:                                        ; preds = %array_ref_bound_check_success, %array_dec_dim_check_success
  %loop_var = phi i64 [ 0, %array_dec_dim_check_success ], [ %next_loop_var, %array_ref_bound_check_success ]
  store i64 %loop_var, i64* %"for3:i", align 4
  %cond = icmp sle i64 %loop_var, 15
  br i1 %cond, label %for_body, label %for_after

for_body:                                         ; preds = %for_check
  %temp_id_load3 = load i64*, i64** %"mv2:seed", align 8
  %temp_id_load4 = load i64*, i64** %"mv2:seed", align 8
  %unary_ref = load i64, i64* %temp_id_load4, align 4
  %binary_int_mul = mul i64 %unary_ref, 137
  %binary_int_add = add i64 %binary_int_mul, 220
  %temp_id_load5 = load i64, i64* %"for3:i", align 4
  %binary_int_add6 = add i64 %binary_int_add, %temp_id_load5
  %binary_int_mod = srem i64 %binary_int_add6, 101
  store i64 %binary_int_mod, i64* %temp_id_load3, align 4
  %array_struct_ptr = load { i64*, i64 }*, { i64*, i64 }** %"ar1:x", align 8
  %temp_id_load7 = load i64, i64* %"for3:i", align 4
  %temp_array_struct_ptr_load = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr, i32 0, i32 1
  %temp_array_struct_load = load i64, i64* %temp_array_struct_ptr_load, align 4
  %array_lower_bound_check = icmp sle i64 0, %temp_id_load7
  %temp_cond_lower_and = and i1 true, %array_lower_bound_check
  %array_upper_bound_check = icmp slt i64 %temp_id_load7, %temp_array_struct_load
  %temp_cond_upper_and = and i1 %temp_cond_lower_and, %array_upper_bound_check
  br i1 %temp_cond_upper_and, label %array_ref_bound_check_success, label %array_ref_bound_check_failed

array_ref_bound_check_failed:                     ; preds = %array_ref_bound_check_failed, %for_body
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed

array_ref_bound_check_success:                    ; preds = %for_body
  %temp_array_struct_ptr_load8 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr, i32 0, i32 0
  %temp_array_struct_load9 = load i64*, i64** %temp_array_struct_ptr_load8, align 8
  %temp_array_element_gep = getelementptr i64, i64* %temp_array_struct_load9, i64 %temp_id_load7
  %temp_id_load10 = load i64*, i64** %"mv2:seed", align 8
  %unary_ref11 = load i64, i64* %temp_id_load10, align 4
  store i64 %unary_ref11, i64* %temp_array_element_gep, align 4
  %next_loop_var = add i64 %loop_var, 1
  br label %for_check

for_after:                                        ; preds = %for_check
  %GC_malloc_call12 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call12, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr = bitcast i8* %GC_malloc_call12 to { i8*, i64 }*
  %temp_struct_store_ptr13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.5, i32 0, i32 0), i8** %temp_struct_store_ptr13, align 8
  %temp_struct_store_ptr14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 1
  store i64 16, i64* %temp_struct_store_ptr14, align 4
  %temp_id_load15 = load { i64*, i64 }*, { i64*, i64 }** %"ar1:x", align 8
  %temp_call = call i1 @"fn3:print_array"({ i8*, i64 }* %string_struct_ptr, { i64*, i64 }* %temp_id_load15)
  %temp_id_load16 = load { i64*, i64 }*, { i64*, i64 }** %"ar1:x", align 8
  %temp_call17 = call i1 @"fn1:bsort"({ i64*, i64 }* %temp_id_load16)
  %GC_malloc_call18 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call18, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr19 = bitcast i8* %GC_malloc_call18 to { i8*, i64 }*
  %temp_struct_store_ptr20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr19, i32 0, i32 0
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.6, i32 0, i32 0), i8** %temp_struct_store_ptr20, align 8
  %temp_struct_store_ptr21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr19, i32 0, i32 1
  store i64 15, i64* %temp_struct_store_ptr21, align 4
  %temp_id_load22 = load { i64*, i64 }*, { i64*, i64 }** %"ar1:x", align 8
  %temp_call23 = call i1 @"fn3:print_array"({ i8*, i64 }* %string_struct_ptr19, { i64*, i64 }* %temp_id_load22)
  store i1 %temp_call23, i1* %"cv2:main", align 1
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 0), align 8
  ret i64 0
}

define i1 @"fn1:bsort"({ i64*, i64 }* %0) {
entry:
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %"fn1:bsort:frame_ptr" = alloca {}, align 8
  %casted_elem_frame_ptr = bitcast {}* %"fn1:bsort:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %"pm1:x" = alloca { i64*, i64 }*, align 8
  %"mv1:changed" = alloca i1*, align 8
  %"for1:i" = alloca i64, align 8
  br label %body

body:                                             ; preds = %entry
  store { i64*, i64 }* %0, { i64*, i64 }** %"pm1:x", align 8
  %GC_malloc_call = call i8* @GC_malloc(i64 1)
  %"mv1:changed_alloca_ptr" = bitcast i8* %GC_malloc_call to i1*
  store i1* %"mv1:changed_alloca_ptr", i1** %"mv1:changed", align 8
  %temp_id_load = load i1*, i1** %"mv1:changed", align 8
  store i1 true, i1* %temp_id_load, align 1
  br label %while_check

while_check:                                      ; preds = %for_after, %body
  %temp_id_load1 = load i1*, i1** %"mv1:changed", align 8
  %unary_ref = load i1, i1* %temp_id_load1, align 1
  br i1 %unary_ref, label %while_body, label %while_after

while_body:                                       ; preds = %while_check
  %temp_id_load2 = load i1*, i1** %"mv1:changed", align 8
  store i1 false, i1* %temp_id_load2, align 1
  %array_struct_ptr = load { i64*, i64 }*, { i64*, i64 }** %"pm1:x", align 8
  %temp_struct_dim_ptr = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr, i32 0, i32 1
  %temp_struct_dim_load = load i64, i64* %temp_struct_dim_ptr, align 4
  %binary_int_sub = sub i64 %temp_struct_dim_load, 2
  br label %for_check

for_check:                                        ; preds = %if_merge, %while_body
  %loop_var = phi i64 [ 0, %while_body ], [ %next_loop_var, %if_merge ]
  store i64 %loop_var, i64* %"for1:i", align 4
  %cond = icmp sle i64 %loop_var, %binary_int_sub
  br i1 %cond, label %for_body, label %for_after

for_body:                                         ; preds = %for_check
  %array_struct_ptr3 = load { i64*, i64 }*, { i64*, i64 }** %"pm1:x", align 8
  %temp_id_load4 = load i64, i64* %"for1:i", align 4
  %temp_array_struct_ptr_load = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr3, i32 0, i32 1
  %temp_array_struct_load = load i64, i64* %temp_array_struct_ptr_load, align 4
  %array_lower_bound_check = icmp sle i64 0, %temp_id_load4
  %temp_cond_lower_and = and i1 true, %array_lower_bound_check
  %array_upper_bound_check = icmp slt i64 %temp_id_load4, %temp_array_struct_load
  %temp_cond_upper_and = and i1 %temp_cond_lower_and, %array_upper_bound_check
  br i1 %temp_cond_upper_and, label %array_ref_bound_check_success, label %array_ref_bound_check_failed

if_then:                                          ; preds = %array_ref_bound_check_success9
  %array_struct_ptr24 = load { i64*, i64 }*, { i64*, i64 }** %"pm1:x", align 8
  %temp_id_load25 = load i64, i64* %"for1:i", align 4
  %temp_array_struct_ptr_load26 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr24, i32 0, i32 1
  %temp_array_struct_load27 = load i64, i64* %temp_array_struct_ptr_load26, align 4
  %array_lower_bound_check28 = icmp sle i64 0, %temp_id_load25
  %temp_cond_lower_and29 = and i1 true, %array_lower_bound_check28
  %array_upper_bound_check30 = icmp slt i64 %temp_id_load25, %temp_array_struct_load27
  %temp_cond_upper_and31 = and i1 %temp_cond_lower_and29, %array_upper_bound_check30
  br i1 %temp_cond_upper_and31, label %array_ref_bound_check_success23, label %array_ref_bound_check_failed22

array_ref_bound_check_failed:                     ; preds = %array_ref_bound_check_failed, %for_body
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed

array_ref_bound_check_success:                    ; preds = %for_body
  %temp_array_struct_ptr_load5 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr3, i32 0, i32 0
  %temp_array_struct_load6 = load i64*, i64** %temp_array_struct_ptr_load5, align 8
  %temp_array_element_gep = getelementptr i64, i64* %temp_array_struct_load6, i64 %temp_id_load4
  %unary_ref7 = load i64, i64* %temp_array_element_gep, align 4
  %array_struct_ptr10 = load { i64*, i64 }*, { i64*, i64 }** %"pm1:x", align 8
  %temp_id_load11 = load i64, i64* %"for1:i", align 4
  %binary_int_add = add i64 %temp_id_load11, 1
  %temp_array_struct_ptr_load12 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr10, i32 0, i32 1
  %temp_array_struct_load13 = load i64, i64* %temp_array_struct_ptr_load12, align 4
  %array_lower_bound_check14 = icmp sle i64 0, %binary_int_add
  %temp_cond_lower_and15 = and i1 true, %array_lower_bound_check14
  %array_upper_bound_check16 = icmp slt i64 %binary_int_add, %temp_array_struct_load13
  %temp_cond_upper_and17 = and i1 %temp_cond_lower_and15, %array_upper_bound_check16
  br i1 %temp_cond_upper_and17, label %array_ref_bound_check_success9, label %array_ref_bound_check_failed8

array_ref_bound_check_failed8:                    ; preds = %array_ref_bound_check_failed8, %array_ref_bound_check_success
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed8

array_ref_bound_check_success9:                   ; preds = %array_ref_bound_check_success
  %temp_array_struct_ptr_load18 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr10, i32 0, i32 0
  %temp_array_struct_load19 = load i64*, i64** %temp_array_struct_ptr_load18, align 8
  %temp_array_element_gep20 = getelementptr i64, i64* %temp_array_struct_load19, i64 %binary_int_add
  %unary_ref21 = load i64, i64* %temp_array_element_gep20, align 4
  %binary_gt = icmp sgt i64 %unary_ref7, %unary_ref21
  br i1 %binary_gt, label %if_then, label %if_else

array_ref_bound_check_failed22:                   ; preds = %array_ref_bound_check_failed22, %if_then
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed22

array_ref_bound_check_success23:                  ; preds = %if_then
  %temp_array_struct_ptr_load32 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr24, i32 0, i32 0
  %temp_array_struct_load33 = load i64*, i64** %temp_array_struct_ptr_load32, align 8
  %temp_array_element_gep34 = getelementptr i64, i64* %temp_array_struct_load33, i64 %temp_id_load25
  %array_struct_ptr37 = load { i64*, i64 }*, { i64*, i64 }** %"pm1:x", align 8
  %temp_id_load38 = load i64, i64* %"for1:i", align 4
  %binary_int_add39 = add i64 %temp_id_load38, 1
  %temp_array_struct_ptr_load40 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr37, i32 0, i32 1
  %temp_array_struct_load41 = load i64, i64* %temp_array_struct_ptr_load40, align 4
  %array_lower_bound_check42 = icmp sle i64 0, %binary_int_add39
  %temp_cond_lower_and43 = and i1 true, %array_lower_bound_check42
  %array_upper_bound_check44 = icmp slt i64 %binary_int_add39, %temp_array_struct_load41
  %temp_cond_upper_and45 = and i1 %temp_cond_lower_and43, %array_upper_bound_check44
  br i1 %temp_cond_upper_and45, label %array_ref_bound_check_success36, label %array_ref_bound_check_failed35

array_ref_bound_check_failed35:                   ; preds = %array_ref_bound_check_failed35, %array_ref_bound_check_success23
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed35

array_ref_bound_check_success36:                  ; preds = %array_ref_bound_check_success23
  %temp_array_struct_ptr_load46 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr37, i32 0, i32 0
  %temp_array_struct_load47 = load i64*, i64** %temp_array_struct_ptr_load46, align 8
  %temp_array_element_gep48 = getelementptr i64, i64* %temp_array_struct_load47, i64 %binary_int_add39
  %temp_call = call i1 @"fn2:swap"(i64* %temp_array_element_gep34, i64* %temp_array_element_gep48)
  %temp_id_load49 = load i1*, i1** %"mv1:changed", align 8
  store i1 true, i1* %temp_id_load49, align 1
  br label %if_merge

if_else:                                          ; preds = %array_ref_bound_check_success9
  br label %if_merge

if_merge:                                         ; preds = %if_else, %array_ref_bound_check_success36
  %temp_phi = phi i1 [ false, %array_ref_bound_check_success36 ], [ false, %if_else ]
  %next_loop_var = add i64 %loop_var, 1
  br label %for_check

for_after:                                        ; preds = %for_check
  br label %while_check

while_after:                                      ; preds = %while_check
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  ret i1 false
}

define i1 @"fn2:swap"(i64* %0, i64* %1) {
entry:
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 2), align 8
  %"fn2:swap:frame_ptr" = alloca {}, align 8
  %casted_elem_frame_ptr = bitcast {}* %"fn2:swap:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 2), align 8
  %"pm2:x" = alloca i64*, align 8
  %"pm3:y" = alloca i64*, align 8
  %"cv1:t" = alloca i64, align 8
  br label %body

body:                                             ; preds = %entry
  store i64* %0, i64** %"pm2:x", align 8
  store i64* %1, i64** %"pm3:y", align 8
  %temp_id_load = load i64*, i64** %"pm2:x", align 8
  %unary_ref = load i64, i64* %temp_id_load, align 4
  store i64 %unary_ref, i64* %"cv1:t", align 4
  %temp_id_load1 = load i64*, i64** %"pm2:x", align 8
  %temp_id_load2 = load i64*, i64** %"pm3:y", align 8
  %unary_ref3 = load i64, i64* %temp_id_load2, align 4
  store i64 %unary_ref3, i64* %temp_id_load1, align 4
  %temp_id_load4 = load i64*, i64** %"pm3:y", align 8
  %temp_id_load5 = load i64, i64* %"cv1:t", align 4
  store i64 %temp_id_load5, i64* %temp_id_load4, align 4
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 2), align 8
  ret i1 false
}

define i1 @"fn3:print_array"({ i8*, i64 }* %0, { i64*, i64 }* %1) {
entry:
  %display_array_ptr_load = load i8*, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %"fn3:print_array:frame_ptr" = alloca {}, align 8
  %casted_elem_frame_ptr = bitcast {}* %"fn3:print_array:frame_ptr" to i8*
  store i8* %casted_elem_frame_ptr, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  %"pm4:msg" = alloca { i8*, i64 }*, align 8
  %"pm5:x" = alloca { i64*, i64 }*, align 8
  %"for2:i" = alloca i64, align 8
  br label %body

body:                                             ; preds = %entry
  store { i8*, i64 }* %0, { i8*, i64 }** %"pm4:msg", align 8
  store { i64*, i64 }* %1, { i64*, i64 }** %"pm5:x", align 8
  %temp_id_load = load { i8*, i64 }*, { i8*, i64 }** %"pm4:msg", align 8
  %temp_call = call i1 @lla_print_string({ i8*, i64 }* %temp_id_load)
  %array_struct_ptr = load { i64*, i64 }*, { i64*, i64 }** %"pm5:x", align 8
  %temp_struct_dim_ptr = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr, i32 0, i32 1
  %temp_struct_dim_load = load i64, i64* %temp_struct_dim_ptr, align 4
  %binary_int_sub = sub i64 %temp_struct_dim_load, 1
  br label %for_check

for_check:                                        ; preds = %array_ref_bound_check_success, %body
  %loop_var = phi i64 [ 0, %body ], [ %next_loop_var, %array_ref_bound_check_success ]
  store i64 %loop_var, i64* %"for2:i", align 4
  %cond = icmp sle i64 %loop_var, %binary_int_sub
  br i1 %cond, label %for_body, label %for_after

for_body:                                         ; preds = %for_check
  %temp_id_load1 = load i64, i64* %"for2:i", align 4
  %binary_gt = icmp sgt i64 %temp_id_load1, 0
  br i1 %binary_gt, label %if_then, label %if_else

if_then:                                          ; preds = %for_body
  %GC_malloc_call = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr = bitcast i8* %GC_malloc_call to { i8*, i64 }*
  %temp_struct_store_ptr = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 0
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.2, i32 0, i32 0), i8** %temp_struct_store_ptr, align 8
  %temp_struct_store_ptr2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr, i32 0, i32 1
  store i64 3, i64* %temp_struct_store_ptr2, align 4
  %temp_call3 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr)
  br label %if_merge

if_else:                                          ; preds = %for_body
  br label %if_merge

if_merge:                                         ; preds = %if_else, %if_then
  %temp_phi = phi i1 [ %temp_call3, %if_then ], [ false, %if_else ]
  %array_struct_ptr4 = load { i64*, i64 }*, { i64*, i64 }** %"pm5:x", align 8
  %temp_id_load5 = load i64, i64* %"for2:i", align 4
  %temp_array_struct_ptr_load = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr4, i32 0, i32 1
  %temp_array_struct_load = load i64, i64* %temp_array_struct_ptr_load, align 4
  %array_lower_bound_check = icmp sle i64 0, %temp_id_load5
  %temp_cond_lower_and = and i1 true, %array_lower_bound_check
  %array_upper_bound_check = icmp slt i64 %temp_id_load5, %temp_array_struct_load
  %temp_cond_upper_and = and i1 %temp_cond_lower_and, %array_upper_bound_check
  br i1 %temp_cond_upper_and, label %array_ref_bound_check_success, label %array_ref_bound_check_failed

array_ref_bound_check_failed:                     ; preds = %array_ref_bound_check_failed, %if_merge
  call void @_runtime_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str.1, i32 0, i32 0), i64 54)
  br label %array_ref_bound_check_failed

array_ref_bound_check_success:                    ; preds = %if_merge
  %temp_array_struct_ptr_load6 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %array_struct_ptr4, i32 0, i32 0
  %temp_array_struct_load7 = load i64*, i64** %temp_array_struct_ptr_load6, align 8
  %temp_array_element_gep = getelementptr i64, i64* %temp_array_struct_load7, i64 %temp_id_load5
  %unary_ref = load i64, i64* %temp_array_element_gep, align 4
  %temp_call8 = call i1 @lla_print_int(i64 %unary_ref)
  %next_loop_var = add i64 %loop_var, 1
  br label %for_check

for_after:                                        ; preds = %for_check
  %GC_malloc_call9 = call i8* @GC_malloc(i64 16)
  call void @GC_register_finalizer(i8* %GC_malloc_call9, void (i8*, i8*)* @_free_array_of_malloc, i8* null, void (i8*, i8*)** null, i8** null)
  %string_struct_ptr10 = bitcast i8* %GC_malloc_call9 to { i8*, i64 }*
  %temp_struct_store_ptr11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr10, i32 0, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.3, i32 0, i32 0), i8** %temp_struct_store_ptr11, align 8
  %temp_struct_store_ptr12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %string_struct_ptr10, i32 0, i32 1
  store i64 2, i64* %temp_struct_store_ptr12, align 4
  %temp_call13 = call i1 @lla_print_string({ i8*, i64 }* %string_struct_ptr10)
  store i8* %display_array_ptr_load, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @display_array, i64 0, i64 1), align 8
  ret i1 %temp_call13
}

declare noalias i8* @malloc(i32)
