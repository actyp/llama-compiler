(* errors caught on unify *)

(* type mismatch error *)
let constvardec: int = true
let functiondec x: int = true
let mutable arraydec [1,true,2]

let arrayref1 = let mutable a[1] in a[1,2]
let arrayref2: int = let mutable a[1]: int in a[1]
let arrayref3 = let mutable a [1]: int in a[true]
let arrayref4 = let mutable a [1] and i = 1 in i[3]
let arrayref5 = let mutable a [1,1] in !a[1,true]

let funccall1 = let f x y = x + y in f 1
let funccall2 = let f (i: int) = i + 1 in f 'c'
let funccall3 = let g (x: char) (y: int) = x in g '1' '1'
let funccall4 = let g (x: bool) = x and f (x: int) = 1 in f g
let funccall5 = let a_int = 1 in a_int 2
let funccall6 = let f (x: int) = true in f (f 1)
let funccall7 = let f (x: int-> int) y = x y and g (x: bool) (y: bool) = x in f g 1
let funccall8 = let mutable a [1,1] and f (x: array of int) = x[0] in f a
let funccall9 = let f (g:int->int->int) (x:int) = g x 1 in f f 1


type cc1 = T1 | T2 of int and cc2 = T3 of int | T4 of int float bool
let constrcall1 = T2
let constrcall2 = T2 true
let constrcall3 = T2 1 true
let constrcall4 = T4 1 1.1 3
let constrcall5: cc1 = T3 1
let constrcall6 = let f (t: cc1) = 1 in f (T3 1)
let constrcall7 = let f x (t: cc2) = x in f 1 (T4 1 1 false)
let constrcall8 = let mutable a [1] in a[T1] := T2 1
let constrcall9 = let f x: cc1 = T3 1 in 1

let arraydim1 = let a = 3 in dim 1 a

let delete1 = delete 1
let delete2 = let f x = delete x and a = new t in f a

let letin1 = let g (x: bool) = x and f (x: int) = 1 in f g
let letin2 = let a_int = 1 in a_int 2
let letin3 = let f (x: int) = x in f (let y = 'c' in y)
let letin4: int = let c = 'c' in c

let bgend: int = begin 'c' end

let ifte1 = if 1 then 1 else 1 (* cond type <> bool *)
let ifte2 = if true then 1 else false (* else type <> then type *)
let ifte3: bool = if true then 1 else 0 (* whole expression (= then type) <> bool *)

let while1 = while 1 do 1 done (* cond type <> bool *)
let while2 = while true do 1 done (* do_expr type <> unit *)

let for1 = for a = true to 3 do 1 done (* start_expr type <> int *)
let for2 = for a = 1 to false do 1 done (* end_expr type <> int *)
let for3 = for a = 1 to 3 do a done (* do_expr type <> unit *)

type t_pm1 = T1 of int and t_pm2 = T2 of int
let pm1 = match 1 with 1 -> true | 2 -> false end (* int (1) <> user defined type *)
let pm2 = match (T1 1) with true -> 1 | false -> 1 end (* bool (true) <> type t_pm1 *)
let pm3 = match (T1 1) with (T2 i) -> i end (* t_pm2 <> t_pm1 *)
let pm4 = match (T1 1) with (T1 i) -> i | true -> 1 end (* bool (true) <> type t_pm1 *)
let pm5: bool = match (T1 1) with (T1 i) -> i | (T1 2) -> 1 end (* bool (pm5) <> int (expr type) *)
let pm6 = match (T1 1) with (T1 1) -> true | (T1 i) -> i end (* bool (true) <> int (expr types) *)
let pm7 = match (T1 1) with (T1 1) -> true | t -> t end (* type t_pm1 (t) <> bool (expr types) *)
let pm8 = match (T1 true) with 1 -> 1 end (* bool (true) <> int *)


(* type circularity *)
let rec tc x = tc

(* wrong number of array dims *)
let wad1 = let mutable a[1,1] in a[0] := 1
let wad2 = let mutable a[1,1] in a[0,0,0] := 1


(* wrong number of func params *)
let wfp1 = let f x = x in f 1 2

(* wrong number of constructor params *)
type wcp_t = WCP of int int
let wcp1 = WCP
let wcp2 = WCP 1
let wcp3 = WCP 1 2 3

(* unmatched if error -- unmatched if has type unit *)
let uif (x: int) = if x > 0 then x

(* no polymorphism, type mismatch *)
let id x = x
let id1 = id 1 and id2 = id 'a'

(* binary operator params *)
let bp1 = 1 = ()
let bp2 = 1 <> ()
let bp3 = 3 == true

(* constructor redefinition/shadowing *)
type t_cs1 = A | B
type t_cs2 = B
let cs_const: t_cs1 = B (* ocaml allows this though! *)
